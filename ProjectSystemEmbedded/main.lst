CCS PCM C Compiler, Version 4.084, 36728               10-May-18 11:30

               Filename: main.lst

               ROM used: 6924 words (85%)
                         Largest free fragment is 899
               RAM used: 260 (71%) at main() level
                         317 (86%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  18
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   5AA
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... #use delay(crystal=20000000) 
*
06E8:  MOVLW  5D
06E9:  MOVWF  04
06EA:  BSF    03.7
06EB:  MOVF   00,W
06EC:  BTFSC  03.2
06ED:  GOTO   6FB
06EE:  MOVLW  06
06EF:  MOVWF  78
06F0:  CLRF   77
06F1:  DECFSZ 77,F
06F2:  GOTO   6F1
06F3:  DECFSZ 78,F
06F4:  GOTO   6F0
06F5:  MOVLW  7B
06F6:  MOVWF  77
06F7:  DECFSZ 77,F
06F8:  GOTO   6F7
06F9:  DECFSZ 00,F
06FA:  GOTO   6EE
06FB:  RETLW  00
.................... #use  rs232(UART1,baud=115200,parity=N,bits=8,stream=ESP_STR,errors) 
*
05AB:  BTFSS  0C.5
05AC:  GOTO   5AB
05AD:  MOVF   18,W
05AE:  MOVWF  28
05AF:  MOVF   1A,W
05B0:  MOVWF  78
05B1:  BTFSS  28.1
05B2:  GOTO   5B5
05B3:  BCF    18.4
05B4:  BSF    18.4
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
*
1306:  BSF    03.5
1307:  BSF    03.6
1308:  MOVF   13,W
1309:  MOVWF  28
130A:  MOVF   12,W
130B:  MOVWF  27
130C:  MOVF   11,W
130D:  MOVWF  26
130E:  MOVF   10,W
130F:  MOVWF  25
1310:  MOVLW  18
1311:  MOVWF  2C
1312:  MOVLW  72
1313:  MOVWF  2B
1314:  MOVLW  31
1315:  MOVWF  2A
1316:  MOVLW  7E
1317:  MOVWF  29
1318:  BCF    0A.4
1319:  BSF    0A.3
131A:  BCF    03.5
131B:  BCF    03.6
131C:  CALL   365
131D:  BSF    0A.4
131E:  BCF    0A.3
131F:  MOVF   7A,W
1320:  BSF    03.5
1321:  BSF    03.6
1322:  MOVWF  25
1323:  MOVF   79,W
1324:  MOVWF  24
1325:  MOVF   78,W
1326:  MOVWF  23
1327:  MOVF   77,W
1328:  MOVWF  22
1329:  BCF    0A.4
132A:  BSF    0A.3
132B:  BCF    03.5
132C:  BCF    03.6
132D:  CALL   60C
132E:  BSF    0A.4
132F:  BCF    0A.3
1330:  MOVF   78,W
1331:  BSF    03.6
1332:  MOVWF  6D
....................    s = 0; 
1333:  BCF    6E.0
....................    y = x; 
1334:  BSF    03.5
1335:  MOVF   13,W
1336:  MOVWF  17
1337:  MOVF   12,W
1338:  MOVWF  16
1339:  MOVF   11,W
133A:  MOVWF  15
133B:  MOVF   10,W
133C:  MOVWF  14
....................  
....................    if (x < 0) 
133D:  MOVF   13,W
133E:  MOVWF  25
133F:  MOVF   12,W
1340:  MOVWF  24
1341:  MOVF   11,W
1342:  MOVWF  23
1343:  MOVF   10,W
1344:  MOVWF  22
1345:  CLRF   29
1346:  CLRF   28
1347:  CLRF   27
1348:  CLRF   26
1349:  BCF    0A.4
134A:  BSF    0A.3
134B:  BCF    03.5
134C:  BCF    03.6
134D:  CALL   5A0
134E:  BSF    0A.4
134F:  BCF    0A.3
1350:  BTFSS  03.0
1351:  GOTO   35C
....................    { 
....................       s = 1; 
1352:  BSF    03.6
1353:  BSF    6E.0
....................       n = -n; 
1354:  COMF   6D,F
1355:  INCF   6D,F
....................       y = -y; 
1356:  BSF    03.5
1357:  MOVF   15,W
1358:  XORLW  80
1359:  MOVWF  15
135A:  BCF    03.5
135B:  BCF    03.6
....................    } 
....................  
....................    res = 0.0; 
135C:  BSF    03.5
135D:  BSF    03.6
135E:  CLRF   1B
135F:  CLRF   1A
1360:  CLRF   19
1361:  CLRF   18
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
1362:  MOVLW  01
1363:  MOVWF  21
1364:  MOVLW  98
1365:  MOVWF  20
1366:  MOVF   20,W
1367:  MOVWF  04
1368:  BCF    03.7
1369:  BTFSC  21.0
136A:  BSF    03.7
136B:  MOVLW  7F
136C:  BCF    03.5
136D:  ADDWF  6D,W
136E:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
136F:  BSF    03.5
1370:  MOVF   17,W
1371:  MOVWF  28
1372:  MOVF   16,W
1373:  MOVWF  27
1374:  MOVF   15,W
1375:  MOVWF  26
1376:  MOVF   14,W
1377:  MOVWF  25
1378:  MOVLW  18
1379:  MOVWF  2C
137A:  MOVLW  72
137B:  MOVWF  2B
137C:  MOVLW  31
137D:  MOVWF  2A
137E:  MOVLW  7E
137F:  MOVWF  29
1380:  BCF    0A.4
1381:  BSF    0A.3
1382:  BCF    03.5
1383:  BCF    03.6
1384:  CALL   365
1385:  BSF    0A.4
1386:  BCF    0A.3
1387:  MOVF   77,W
1388:  BSF    03.5
1389:  BSF    03.6
138A:  MOVWF  20
138B:  MOVF   78,W
138C:  MOVWF  21
138D:  MOVF   79,W
138E:  MOVWF  22
138F:  MOVF   7A,W
1390:  MOVWF  23
1391:  CLRF   27
1392:  BCF    03.5
1393:  MOVF   6D,W
1394:  BSF    03.5
1395:  MOVWF  26
1396:  BTFSC  26.7
1397:  DECF   27,F
1398:  BCF    0A.4
1399:  BSF    0A.3
139A:  BCF    03.5
139B:  BCF    03.6
139C:  CALL   5E3
139D:  BSF    0A.4
139E:  BCF    0A.3
139F:  BSF    03.1
13A0:  BSF    03.5
13A1:  BSF    03.6
13A2:  MOVF   23,W
13A3:  MOVWF  29
13A4:  MOVF   22,W
13A5:  MOVWF  28
13A6:  MOVF   21,W
13A7:  MOVWF  27
13A8:  MOVF   20,W
13A9:  MOVWF  26
13AA:  MOVF   7A,W
13AB:  MOVWF  2D
13AC:  MOVF   79,W
13AD:  MOVWF  2C
13AE:  MOVF   78,W
13AF:  MOVWF  2B
13B0:  MOVF   77,W
13B1:  MOVWF  2A
13B2:  BCF    0A.4
13B3:  BSF    0A.3
13B4:  BCF    03.5
13B5:  BCF    03.6
13B6:  CALL   433
13B7:  BSF    0A.4
13B8:  BCF    0A.3
13B9:  MOVF   7A,W
13BA:  BSF    03.5
13BB:  BSF    03.6
13BC:  MOVWF  17
13BD:  MOVF   79,W
13BE:  MOVWF  16
13BF:  MOVF   78,W
13C0:  MOVWF  15
13C1:  MOVF   77,W
13C2:  MOVWF  14
....................  
....................    r = pe[0]*y + pe[1]; 
13C3:  MOVLW  7C
13C4:  MOVWF  25
13C5:  MOVLW  88
13C6:  MOVWF  24
13C7:  MOVLW  59
13C8:  MOVWF  23
13C9:  MOVLW  72
13CA:  MOVWF  22
13CB:  MOVF   17,W
13CC:  MOVWF  29
13CD:  MOVF   16,W
13CE:  MOVWF  28
13CF:  MOVF   15,W
13D0:  MOVWF  27
13D1:  MOVF   14,W
13D2:  MOVWF  26
13D3:  BCF    0A.4
13D4:  BSF    0A.3
13D5:  BCF    03.5
13D6:  BCF    03.6
13D7:  CALL   2EC
13D8:  BSF    0A.4
13D9:  BCF    0A.3
13DA:  MOVF   77,W
13DB:  BSF    03.5
13DC:  BSF    03.6
13DD:  MOVWF  20
13DE:  MOVF   78,W
13DF:  MOVWF  21
13E0:  MOVF   79,W
13E1:  MOVWF  22
13E2:  MOVF   7A,W
13E3:  MOVWF  23
13E4:  BCF    03.1
13E5:  MOVF   23,W
13E6:  MOVWF  29
13E7:  MOVF   22,W
13E8:  MOVWF  28
13E9:  MOVF   21,W
13EA:  MOVWF  27
13EB:  MOVF   20,W
13EC:  MOVWF  26
13ED:  MOVLW  E0
13EE:  MOVWF  2D
13EF:  MOVLW  97
13F0:  MOVWF  2C
13F1:  MOVLW  26
13F2:  MOVWF  2B
13F3:  MOVLW  75
13F4:  MOVWF  2A
13F5:  BCF    0A.4
13F6:  BSF    0A.3
13F7:  BCF    03.5
13F8:  BCF    03.6
13F9:  CALL   433
13FA:  BSF    0A.4
13FB:  BCF    0A.3
13FC:  MOVF   7A,W
13FD:  BSF    03.5
13FE:  BSF    03.6
13FF:  MOVWF  1F
1400:  MOVF   79,W
1401:  MOVWF  1E
1402:  MOVF   78,W
1403:  MOVWF  1D
1404:  MOVF   77,W
1405:  MOVWF  1C
....................    r = r*y + pe[2]; 
1406:  MOVF   1F,W
1407:  MOVWF  25
1408:  MOVF   1E,W
1409:  MOVWF  24
140A:  MOVF   1D,W
140B:  MOVWF  23
140C:  MOVF   1C,W
140D:  MOVWF  22
140E:  MOVF   17,W
140F:  MOVWF  29
1410:  MOVF   16,W
1411:  MOVWF  28
1412:  MOVF   15,W
1413:  MOVWF  27
1414:  MOVF   14,W
1415:  MOVWF  26
1416:  BCF    0A.4
1417:  BSF    0A.3
1418:  BCF    03.5
1419:  BCF    03.6
141A:  CALL   2EC
141B:  BSF    0A.4
141C:  BCF    0A.3
141D:  MOVF   77,W
141E:  BSF    03.5
141F:  BSF    03.6
1420:  MOVWF  20
1421:  MOVF   78,W
1422:  MOVWF  21
1423:  MOVF   79,W
1424:  MOVWF  22
1425:  MOVF   7A,W
1426:  MOVWF  23
1427:  BCF    03.1
1428:  MOVF   23,W
1429:  MOVWF  29
142A:  MOVF   22,W
142B:  MOVWF  28
142C:  MOVF   21,W
142D:  MOVWF  27
142E:  MOVF   20,W
142F:  MOVWF  26
1430:  MOVLW  C4
1431:  MOVWF  2D
1432:  MOVLW  1D
1433:  MOVWF  2C
1434:  MOVLW  1E
1435:  MOVWF  2B
1436:  MOVLW  78
1437:  MOVWF  2A
1438:  BCF    0A.4
1439:  BSF    0A.3
143A:  BCF    03.5
143B:  BCF    03.6
143C:  CALL   433
143D:  BSF    0A.4
143E:  BCF    0A.3
143F:  MOVF   7A,W
1440:  BSF    03.5
1441:  BSF    03.6
1442:  MOVWF  1F
1443:  MOVF   79,W
1444:  MOVWF  1E
1445:  MOVF   78,W
1446:  MOVWF  1D
1447:  MOVF   77,W
1448:  MOVWF  1C
....................    r = r*y + pe[3]; 
1449:  MOVF   1F,W
144A:  MOVWF  25
144B:  MOVF   1E,W
144C:  MOVWF  24
144D:  MOVF   1D,W
144E:  MOVWF  23
144F:  MOVF   1C,W
1450:  MOVWF  22
1451:  MOVF   17,W
1452:  MOVWF  29
1453:  MOVF   16,W
1454:  MOVWF  28
1455:  MOVF   15,W
1456:  MOVWF  27
1457:  MOVF   14,W
1458:  MOVWF  26
1459:  BCF    0A.4
145A:  BSF    0A.3
145B:  BCF    03.5
145C:  BCF    03.6
145D:  CALL   2EC
145E:  BSF    0A.4
145F:  BCF    0A.3
1460:  MOVF   77,W
1461:  BSF    03.5
1462:  BSF    03.6
1463:  MOVWF  20
1464:  MOVF   78,W
1465:  MOVWF  21
1466:  MOVF   79,W
1467:  MOVWF  22
1468:  MOVF   7A,W
1469:  MOVWF  23
146A:  BCF    03.1
146B:  MOVF   23,W
146C:  MOVWF  29
146D:  MOVF   22,W
146E:  MOVWF  28
146F:  MOVF   21,W
1470:  MOVWF  27
1471:  MOVF   20,W
1472:  MOVWF  26
1473:  MOVLW  5E
1474:  MOVWF  2D
1475:  MOVLW  50
1476:  MOVWF  2C
1477:  MOVLW  63
1478:  MOVWF  2B
1479:  MOVLW  7A
147A:  MOVWF  2A
147B:  BCF    0A.4
147C:  BSF    0A.3
147D:  BCF    03.5
147E:  BCF    03.6
147F:  CALL   433
1480:  BSF    0A.4
1481:  BCF    0A.3
1482:  MOVF   7A,W
1483:  BSF    03.5
1484:  BSF    03.6
1485:  MOVWF  1F
1486:  MOVF   79,W
1487:  MOVWF  1E
1488:  MOVF   78,W
1489:  MOVWF  1D
148A:  MOVF   77,W
148B:  MOVWF  1C
....................    r = r*y + pe[4]; 
148C:  MOVF   1F,W
148D:  MOVWF  25
148E:  MOVF   1E,W
148F:  MOVWF  24
1490:  MOVF   1D,W
1491:  MOVWF  23
1492:  MOVF   1C,W
1493:  MOVWF  22
1494:  MOVF   17,W
1495:  MOVWF  29
1496:  MOVF   16,W
1497:  MOVWF  28
1498:  MOVF   15,W
1499:  MOVWF  27
149A:  MOVF   14,W
149B:  MOVWF  26
149C:  BCF    0A.4
149D:  BSF    0A.3
149E:  BCF    03.5
149F:  BCF    03.6
14A0:  CALL   2EC
14A1:  BSF    0A.4
14A2:  BCF    0A.3
14A3:  MOVF   77,W
14A4:  BSF    03.5
14A5:  BSF    03.6
14A6:  MOVWF  20
14A7:  MOVF   78,W
14A8:  MOVWF  21
14A9:  MOVF   79,W
14AA:  MOVWF  22
14AB:  MOVF   7A,W
14AC:  MOVWF  23
14AD:  BCF    03.1
14AE:  MOVF   23,W
14AF:  MOVWF  29
14B0:  MOVF   22,W
14B1:  MOVWF  28
14B2:  MOVF   21,W
14B3:  MOVWF  27
14B4:  MOVF   20,W
14B5:  MOVWF  26
14B6:  MOVLW  1A
14B7:  MOVWF  2D
14B8:  MOVLW  FE
14B9:  MOVWF  2C
14BA:  MOVLW  75
14BB:  MOVWF  2B
14BC:  MOVLW  7C
14BD:  MOVWF  2A
14BE:  BCF    0A.4
14BF:  BSF    0A.3
14C0:  BCF    03.5
14C1:  BCF    03.6
14C2:  CALL   433
14C3:  BSF    0A.4
14C4:  BCF    0A.3
14C5:  MOVF   7A,W
14C6:  BSF    03.5
14C7:  BSF    03.6
14C8:  MOVWF  1F
14C9:  MOVF   79,W
14CA:  MOVWF  1E
14CB:  MOVF   78,W
14CC:  MOVWF  1D
14CD:  MOVF   77,W
14CE:  MOVWF  1C
....................    r = r*y + pe[5]; 
14CF:  MOVF   1F,W
14D0:  MOVWF  25
14D1:  MOVF   1E,W
14D2:  MOVWF  24
14D3:  MOVF   1D,W
14D4:  MOVWF  23
14D5:  MOVF   1C,W
14D6:  MOVWF  22
14D7:  MOVF   17,W
14D8:  MOVWF  29
14D9:  MOVF   16,W
14DA:  MOVWF  28
14DB:  MOVF   15,W
14DC:  MOVWF  27
14DD:  MOVF   14,W
14DE:  MOVWF  26
14DF:  BCF    0A.4
14E0:  BSF    0A.3
14E1:  BCF    03.5
14E2:  BCF    03.6
14E3:  CALL   2EC
14E4:  BSF    0A.4
14E5:  BCF    0A.3
14E6:  MOVF   77,W
14E7:  BSF    03.5
14E8:  BSF    03.6
14E9:  MOVWF  20
14EA:  MOVF   78,W
14EB:  MOVWF  21
14EC:  MOVF   79,W
14ED:  MOVWF  22
14EE:  MOVF   7A,W
14EF:  MOVWF  23
14F0:  BCF    03.1
14F1:  MOVF   23,W
14F2:  MOVWF  29
14F3:  MOVF   22,W
14F4:  MOVWF  28
14F5:  MOVF   21,W
14F6:  MOVWF  27
14F7:  MOVF   20,W
14F8:  MOVWF  26
14F9:  MOVLW  18
14FA:  MOVWF  2D
14FB:  MOVLW  72
14FC:  MOVWF  2C
14FD:  MOVLW  31
14FE:  MOVWF  2B
14FF:  MOVLW  7E
1500:  MOVWF  2A
1501:  BCF    0A.4
1502:  BSF    0A.3
1503:  BCF    03.5
1504:  BCF    03.6
1505:  CALL   433
1506:  BSF    0A.4
1507:  BCF    0A.3
1508:  MOVF   7A,W
1509:  BSF    03.5
150A:  BSF    03.6
150B:  MOVWF  1F
150C:  MOVF   79,W
150D:  MOVWF  1E
150E:  MOVF   78,W
150F:  MOVWF  1D
1510:  MOVF   77,W
1511:  MOVWF  1C
....................  
....................    res = res*(1.0 + y*r); 
1512:  MOVF   17,W
1513:  MOVWF  25
1514:  MOVF   16,W
1515:  MOVWF  24
1516:  MOVF   15,W
1517:  MOVWF  23
1518:  MOVF   14,W
1519:  MOVWF  22
151A:  MOVF   1F,W
151B:  MOVWF  29
151C:  MOVF   1E,W
151D:  MOVWF  28
151E:  MOVF   1D,W
151F:  MOVWF  27
1520:  MOVF   1C,W
1521:  MOVWF  26
1522:  BCF    0A.4
1523:  BSF    0A.3
1524:  BCF    03.5
1525:  BCF    03.6
1526:  CALL   2EC
1527:  BSF    0A.4
1528:  BCF    0A.3
1529:  BCF    03.1
152A:  BSF    03.5
152B:  BSF    03.6
152C:  CLRF   29
152D:  CLRF   28
152E:  CLRF   27
152F:  MOVLW  7F
1530:  MOVWF  26
1531:  MOVF   7A,W
1532:  MOVWF  2D
1533:  MOVF   79,W
1534:  MOVWF  2C
1535:  MOVF   78,W
1536:  MOVWF  2B
1537:  MOVF   77,W
1538:  MOVWF  2A
1539:  BCF    0A.4
153A:  BSF    0A.3
153B:  BCF    03.5
153C:  BCF    03.6
153D:  CALL   433
153E:  BSF    0A.4
153F:  BCF    0A.3
1540:  BSF    03.5
1541:  BSF    03.6
1542:  MOVF   1B,W
1543:  MOVWF  25
1544:  MOVF   1A,W
1545:  MOVWF  24
1546:  MOVF   19,W
1547:  MOVWF  23
1548:  MOVF   18,W
1549:  MOVWF  22
154A:  MOVF   7A,W
154B:  MOVWF  29
154C:  MOVF   79,W
154D:  MOVWF  28
154E:  MOVF   78,W
154F:  MOVWF  27
1550:  MOVF   77,W
1551:  MOVWF  26
1552:  BCF    0A.4
1553:  BSF    0A.3
1554:  BCF    03.5
1555:  BCF    03.6
1556:  CALL   2EC
1557:  BSF    0A.4
1558:  BCF    0A.3
1559:  MOVF   7A,W
155A:  BSF    03.5
155B:  BSF    03.6
155C:  MOVWF  1B
155D:  MOVF   79,W
155E:  MOVWF  1A
155F:  MOVF   78,W
1560:  MOVWF  19
1561:  MOVF   77,W
1562:  MOVWF  18
....................  
....................    if (s) 
1563:  BCF    03.5
1564:  BTFSS  6E.0
1565:  GOTO   586
....................       res = 1.0/res; 
1566:  BSF    03.5
1567:  CLRF   28
1568:  CLRF   27
1569:  CLRF   26
156A:  MOVLW  7F
156B:  MOVWF  25
156C:  MOVF   1B,W
156D:  MOVWF  2C
156E:  MOVF   1A,W
156F:  MOVWF  2B
1570:  MOVF   19,W
1571:  MOVWF  2A
1572:  MOVF   18,W
1573:  MOVWF  29
1574:  BCF    0A.4
1575:  BSF    0A.3
1576:  BCF    03.5
1577:  BCF    03.6
1578:  CALL   365
1579:  BSF    0A.4
157A:  BCF    0A.3
157B:  MOVF   7A,W
157C:  BSF    03.5
157D:  BSF    03.6
157E:  MOVWF  1B
157F:  MOVF   79,W
1580:  MOVWF  1A
1581:  MOVF   78,W
1582:  MOVWF  19
1583:  MOVF   77,W
1584:  MOVWF  18
1585:  BCF    03.5
....................    return(res); 
1586:  BSF    03.5
1587:  MOVF   18,W
1588:  MOVWF  77
1589:  MOVF   19,W
158A:  MOVWF  78
158B:  MOVF   1A,W
158C:  MOVWF  79
158D:  MOVF   1B,W
158E:  MOVWF  7A
.................... } 
158F:  BCF    03.5
1590:  BCF    03.6
1591:  RETLW  00
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1000:  BSF    03.6
1001:  MOVF   6F,W
1002:  BSF    03.5
1003:  MOVWF  13
1004:  BCF    03.5
1005:  MOVF   6E,W
1006:  BSF    03.5
1007:  MOVWF  12
1008:  BCF    03.5
1009:  MOVF   6D,W
100A:  BSF    03.5
100B:  MOVWF  11
100C:  BCF    03.5
100D:  MOVF   6C,W
100E:  BSF    03.5
100F:  MOVWF  10
....................  
....................    if (y != 1.0) 
1010:  MOVF   13,W
1011:  MOVWF  25
1012:  MOVF   12,W
1013:  MOVWF  24
1014:  MOVF   11,W
1015:  MOVWF  23
1016:  MOVF   10,W
1017:  MOVWF  22
1018:  CLRF   29
1019:  CLRF   28
101A:  CLRF   27
101B:  MOVLW  7F
101C:  MOVWF  26
101D:  BCF    0A.4
101E:  BSF    0A.3
101F:  BCF    03.5
1020:  BCF    03.6
1021:  CALL   5A0
1022:  BSF    0A.4
1023:  BCF    0A.3
1024:  BTFSC  03.2
1025:  GOTO   2F5
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1026:  MOVLW  01
1027:  BSF    03.5
1028:  BSF    03.6
1029:  MOVWF  22
102A:  MOVLW  90
102B:  MOVWF  21
102C:  MOVF   21,W
102D:  MOVWF  04
102E:  BCF    03.7
102F:  BTFSC  22.0
1030:  BSF    03.7
1031:  MOVLW  7E
1032:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1033:  BSF    03.1
1034:  MOVF   13,W
1035:  MOVWF  29
1036:  MOVF   12,W
1037:  MOVWF  28
1038:  MOVF   11,W
1039:  MOVWF  27
103A:  MOVF   10,W
103B:  MOVWF  26
103C:  CLRF   2D
103D:  CLRF   2C
103E:  CLRF   2B
103F:  MOVLW  7F
1040:  MOVWF  2A
1041:  BCF    0A.4
1042:  BSF    0A.3
1043:  BCF    03.5
1044:  BCF    03.6
1045:  CALL   433
1046:  BSF    0A.4
1047:  BCF    0A.3
1048:  MOVF   77,W
1049:  BSF    03.5
104A:  BSF    03.6
104B:  MOVWF  21
104C:  MOVF   78,W
104D:  MOVWF  22
104E:  MOVF   79,W
104F:  MOVWF  23
1050:  MOVF   7A,W
1051:  MOVWF  24
1052:  BCF    03.1
1053:  MOVF   13,W
1054:  MOVWF  29
1055:  MOVF   12,W
1056:  MOVWF  28
1057:  MOVF   11,W
1058:  MOVWF  27
1059:  MOVF   10,W
105A:  MOVWF  26
105B:  CLRF   2D
105C:  CLRF   2C
105D:  CLRF   2B
105E:  MOVLW  7F
105F:  MOVWF  2A
1060:  BCF    0A.4
1061:  BSF    0A.3
1062:  BCF    03.5
1063:  BCF    03.6
1064:  CALL   433
1065:  BSF    0A.4
1066:  BCF    0A.3
1067:  BSF    03.5
1068:  BSF    03.6
1069:  MOVF   24,W
106A:  MOVWF  28
106B:  MOVF   23,W
106C:  MOVWF  27
106D:  MOVF   22,W
106E:  MOVWF  26
106F:  MOVF   21,W
1070:  MOVWF  25
1071:  MOVF   7A,W
1072:  MOVWF  2C
1073:  MOVF   79,W
1074:  MOVWF  2B
1075:  MOVF   78,W
1076:  MOVWF  2A
1077:  MOVF   77,W
1078:  MOVWF  29
1079:  BCF    0A.4
107A:  BSF    0A.3
107B:  BCF    03.5
107C:  BCF    03.6
107D:  CALL   365
107E:  BSF    0A.4
107F:  BCF    0A.3
1080:  MOVF   7A,W
1081:  BSF    03.5
1082:  BSF    03.6
1083:  MOVWF  13
1084:  MOVF   79,W
1085:  MOVWF  12
1086:  MOVF   78,W
1087:  MOVWF  11
1088:  MOVF   77,W
1089:  MOVWF  10
....................  
....................       y2=y*y; 
108A:  MOVF   13,W
108B:  MOVWF  25
108C:  MOVF   12,W
108D:  MOVWF  24
108E:  MOVF   11,W
108F:  MOVWF  23
1090:  MOVF   10,W
1091:  MOVWF  22
1092:  MOVF   13,W
1093:  MOVWF  29
1094:  MOVF   12,W
1095:  MOVWF  28
1096:  MOVF   11,W
1097:  MOVWF  27
1098:  MOVF   10,W
1099:  MOVWF  26
109A:  BCF    0A.4
109B:  BSF    0A.3
109C:  BCF    03.5
109D:  BCF    03.6
109E:  CALL   2EC
109F:  BSF    0A.4
10A0:  BCF    0A.3
10A1:  MOVF   7A,W
10A2:  BSF    03.5
10A3:  BSF    03.6
10A4:  MOVWF  1F
10A5:  MOVF   79,W
10A6:  MOVWF  1E
10A7:  MOVF   78,W
10A8:  MOVWF  1D
10A9:  MOVF   77,W
10AA:  MOVWF  1C
....................  
....................       res = pl[0]*y2 + pl[1]; 
10AB:  MOVLW  BC
10AC:  MOVWF  25
10AD:  MOVLW  24
10AE:  MOVWF  24
10AF:  MOVLW  67
10B0:  MOVWF  23
10B1:  MOVLW  7D
10B2:  MOVWF  22
10B3:  MOVF   1F,W
10B4:  MOVWF  29
10B5:  MOVF   1E,W
10B6:  MOVWF  28
10B7:  MOVF   1D,W
10B8:  MOVWF  27
10B9:  MOVF   1C,W
10BA:  MOVWF  26
10BB:  BCF    0A.4
10BC:  BSF    0A.3
10BD:  BCF    03.5
10BE:  BCF    03.6
10BF:  CALL   2EC
10C0:  BSF    0A.4
10C1:  BCF    0A.3
10C2:  MOVF   77,W
10C3:  BSF    03.5
10C4:  BSF    03.6
10C5:  MOVWF  21
10C6:  MOVF   78,W
10C7:  MOVWF  22
10C8:  MOVF   79,W
10C9:  MOVWF  23
10CA:  MOVF   7A,W
10CB:  MOVWF  24
10CC:  BCF    03.1
10CD:  MOVF   24,W
10CE:  MOVWF  29
10CF:  MOVF   23,W
10D0:  MOVWF  28
10D1:  MOVF   22,W
10D2:  MOVWF  27
10D3:  MOVF   21,W
10D4:  MOVWF  26
10D5:  MOVLW  E3
10D6:  MOVWF  2D
10D7:  MOVLW  E4
10D8:  MOVWF  2C
10D9:  MOVLW  90
10DA:  MOVWF  2B
10DB:  MOVLW  82
10DC:  MOVWF  2A
10DD:  BCF    0A.4
10DE:  BSF    0A.3
10DF:  BCF    03.5
10E0:  BCF    03.6
10E1:  CALL   433
10E2:  BSF    0A.4
10E3:  BCF    0A.3
10E4:  MOVF   7A,W
10E5:  BSF    03.5
10E6:  BSF    03.6
10E7:  MOVWF  17
10E8:  MOVF   79,W
10E9:  MOVWF  16
10EA:  MOVF   78,W
10EB:  MOVWF  15
10EC:  MOVF   77,W
10ED:  MOVWF  14
....................       res = res*y2 + pl[2]; 
10EE:  MOVF   17,W
10EF:  MOVWF  25
10F0:  MOVF   16,W
10F1:  MOVWF  24
10F2:  MOVF   15,W
10F3:  MOVWF  23
10F4:  MOVF   14,W
10F5:  MOVWF  22
10F6:  MOVF   1F,W
10F7:  MOVWF  29
10F8:  MOVF   1E,W
10F9:  MOVWF  28
10FA:  MOVF   1D,W
10FB:  MOVWF  27
10FC:  MOVF   1C,W
10FD:  MOVWF  26
10FE:  BCF    0A.4
10FF:  BSF    0A.3
1100:  BCF    03.5
1101:  BCF    03.6
1102:  CALL   2EC
1103:  BSF    0A.4
1104:  BCF    0A.3
1105:  MOVF   77,W
1106:  BSF    03.5
1107:  BSF    03.6
1108:  MOVWF  21
1109:  MOVF   78,W
110A:  MOVWF  22
110B:  MOVF   79,W
110C:  MOVWF  23
110D:  MOVF   7A,W
110E:  MOVWF  24
110F:  BCF    03.1
1110:  MOVF   24,W
1111:  MOVWF  29
1112:  MOVF   23,W
1113:  MOVWF  28
1114:  MOVF   22,W
1115:  MOVWF  27
1116:  MOVF   21,W
1117:  MOVWF  26
1118:  MOVLW  1C
1119:  MOVWF  2D
111A:  MOVLW  87
111B:  MOVWF  2C
111C:  MOVLW  57
111D:  MOVWF  2B
111E:  MOVLW  83
111F:  MOVWF  2A
1120:  BCF    0A.4
1121:  BSF    0A.3
1122:  BCF    03.5
1123:  BCF    03.6
1124:  CALL   433
1125:  BSF    0A.4
1126:  BCF    0A.3
1127:  MOVF   7A,W
1128:  BSF    03.5
1129:  BSF    03.6
112A:  MOVWF  17
112B:  MOVF   79,W
112C:  MOVWF  16
112D:  MOVF   78,W
112E:  MOVWF  15
112F:  MOVF   77,W
1130:  MOVWF  14
....................       res = res*y2 + pl[3]; 
1131:  MOVF   17,W
1132:  MOVWF  25
1133:  MOVF   16,W
1134:  MOVWF  24
1135:  MOVF   15,W
1136:  MOVWF  23
1137:  MOVF   14,W
1138:  MOVWF  22
1139:  MOVF   1F,W
113A:  MOVWF  29
113B:  MOVF   1E,W
113C:  MOVWF  28
113D:  MOVF   1D,W
113E:  MOVWF  27
113F:  MOVF   1C,W
1140:  MOVWF  26
1141:  BCF    0A.4
1142:  BSF    0A.3
1143:  BCF    03.5
1144:  BCF    03.6
1145:  CALL   2EC
1146:  BSF    0A.4
1147:  BCF    0A.3
1148:  MOVF   77,W
1149:  BSF    03.5
114A:  BSF    03.6
114B:  MOVWF  21
114C:  MOVF   78,W
114D:  MOVWF  22
114E:  MOVF   79,W
114F:  MOVWF  23
1150:  MOVF   7A,W
1151:  MOVWF  24
1152:  BCF    03.1
1153:  MOVF   24,W
1154:  MOVWF  29
1155:  MOVF   23,W
1156:  MOVWF  28
1157:  MOVF   22,W
1158:  MOVWF  27
1159:  MOVF   21,W
115A:  MOVWF  26
115B:  MOVLW  AB
115C:  MOVWF  2D
115D:  MOVLW  E1
115E:  MOVWF  2C
115F:  MOVLW  9E
1160:  MOVWF  2B
1161:  MOVLW  83
1162:  MOVWF  2A
1163:  BCF    0A.4
1164:  BSF    0A.3
1165:  BCF    03.5
1166:  BCF    03.6
1167:  CALL   433
1168:  BSF    0A.4
1169:  BCF    0A.3
116A:  MOVF   7A,W
116B:  BSF    03.5
116C:  BSF    03.6
116D:  MOVWF  17
116E:  MOVF   79,W
116F:  MOVWF  16
1170:  MOVF   78,W
1171:  MOVWF  15
1172:  MOVF   77,W
1173:  MOVWF  14
....................  
....................       r = ql[0]*y2 + ql[1]; 
1174:  CLRF   25
1175:  CLRF   24
1176:  CLRF   23
1177:  MOVLW  7F
1178:  MOVWF  22
1179:  MOVF   1F,W
117A:  MOVWF  29
117B:  MOVF   1E,W
117C:  MOVWF  28
117D:  MOVF   1D,W
117E:  MOVWF  27
117F:  MOVF   1C,W
1180:  MOVWF  26
1181:  BCF    0A.4
1182:  BSF    0A.3
1183:  BCF    03.5
1184:  BCF    03.6
1185:  CALL   2EC
1186:  BSF    0A.4
1187:  BCF    0A.3
1188:  MOVF   77,W
1189:  BSF    03.5
118A:  BSF    03.6
118B:  MOVWF  21
118C:  MOVF   78,W
118D:  MOVWF  22
118E:  MOVF   79,W
118F:  MOVWF  23
1190:  MOVF   7A,W
1191:  MOVWF  24
1192:  BCF    03.1
1193:  MOVF   24,W
1194:  MOVWF  29
1195:  MOVF   23,W
1196:  MOVWF  28
1197:  MOVF   22,W
1198:  MOVWF  27
1199:  MOVF   21,W
119A:  MOVWF  26
119B:  MOVLW  B4
119C:  MOVWF  2D
119D:  MOVLW  2A
119E:  MOVWF  2C
119F:  MOVLW  82
11A0:  MOVWF  2B
11A1:  MOVWF  2A
11A2:  BCF    0A.4
11A3:  BSF    0A.3
11A4:  BCF    03.5
11A5:  BCF    03.6
11A6:  CALL   433
11A7:  BSF    0A.4
11A8:  BCF    0A.3
11A9:  MOVF   7A,W
11AA:  BSF    03.5
11AB:  BSF    03.6
11AC:  MOVWF  1B
11AD:  MOVF   79,W
11AE:  MOVWF  1A
11AF:  MOVF   78,W
11B0:  MOVWF  19
11B1:  MOVF   77,W
11B2:  MOVWF  18
....................       r = r*y2 + ql[2]; 
11B3:  MOVF   1B,W
11B4:  MOVWF  25
11B5:  MOVF   1A,W
11B6:  MOVWF  24
11B7:  MOVF   19,W
11B8:  MOVWF  23
11B9:  MOVF   18,W
11BA:  MOVWF  22
11BB:  MOVF   1F,W
11BC:  MOVWF  29
11BD:  MOVF   1E,W
11BE:  MOVWF  28
11BF:  MOVF   1D,W
11C0:  MOVWF  27
11C1:  MOVF   1C,W
11C2:  MOVWF  26
11C3:  BCF    0A.4
11C4:  BSF    0A.3
11C5:  BCF    03.5
11C6:  BCF    03.6
11C7:  CALL   2EC
11C8:  BSF    0A.4
11C9:  BCF    0A.3
11CA:  MOVF   77,W
11CB:  BSF    03.5
11CC:  BSF    03.6
11CD:  MOVWF  21
11CE:  MOVF   78,W
11CF:  MOVWF  22
11D0:  MOVF   79,W
11D1:  MOVWF  23
11D2:  MOVF   7A,W
11D3:  MOVWF  24
11D4:  BCF    03.1
11D5:  MOVF   24,W
11D6:  MOVWF  29
11D7:  MOVF   23,W
11D8:  MOVWF  28
11D9:  MOVF   22,W
11DA:  MOVWF  27
11DB:  MOVF   21,W
11DC:  MOVWF  26
11DD:  MOVLW  80
11DE:  MOVWF  2D
11DF:  MOVLW  3E
11E0:  MOVWF  2C
11E1:  MOVLW  06
11E2:  MOVWF  2B
11E3:  MOVLW  83
11E4:  MOVWF  2A
11E5:  BCF    0A.4
11E6:  BSF    0A.3
11E7:  BCF    03.5
11E8:  BCF    03.6
11E9:  CALL   433
11EA:  BSF    0A.4
11EB:  BCF    0A.3
11EC:  MOVF   7A,W
11ED:  BSF    03.5
11EE:  BSF    03.6
11EF:  MOVWF  1B
11F0:  MOVF   79,W
11F1:  MOVWF  1A
11F2:  MOVF   78,W
11F3:  MOVWF  19
11F4:  MOVF   77,W
11F5:  MOVWF  18
....................       r = r*y2 + ql[3]; 
11F6:  MOVF   1B,W
11F7:  MOVWF  25
11F8:  MOVF   1A,W
11F9:  MOVWF  24
11FA:  MOVF   19,W
11FB:  MOVWF  23
11FC:  MOVF   18,W
11FD:  MOVWF  22
11FE:  MOVF   1F,W
11FF:  MOVWF  29
1200:  MOVF   1E,W
1201:  MOVWF  28
1202:  MOVF   1D,W
1203:  MOVWF  27
1204:  MOVF   1C,W
1205:  MOVWF  26
1206:  BCF    0A.4
1207:  BSF    0A.3
1208:  BCF    03.5
1209:  BCF    03.6
120A:  CALL   2EC
120B:  BSF    0A.4
120C:  BCF    0A.3
120D:  MOVF   77,W
120E:  BSF    03.5
120F:  BSF    03.6
1210:  MOVWF  21
1211:  MOVF   78,W
1212:  MOVWF  22
1213:  MOVF   79,W
1214:  MOVWF  23
1215:  MOVF   7A,W
1216:  MOVWF  24
1217:  BCF    03.1
1218:  MOVF   24,W
1219:  MOVWF  29
121A:  MOVF   23,W
121B:  MOVWF  28
121C:  MOVF   22,W
121D:  MOVWF  27
121E:  MOVF   21,W
121F:  MOVWF  26
1220:  MOVLW  AB
1221:  MOVWF  2D
1222:  MOVLW  E1
1223:  MOVWF  2C
1224:  MOVLW  9E
1225:  MOVWF  2B
1226:  MOVLW  82
1227:  MOVWF  2A
1228:  BCF    0A.4
1229:  BSF    0A.3
122A:  BCF    03.5
122B:  BCF    03.6
122C:  CALL   433
122D:  BSF    0A.4
122E:  BCF    0A.3
122F:  MOVF   7A,W
1230:  BSF    03.5
1231:  BSF    03.6
1232:  MOVWF  1B
1233:  MOVF   79,W
1234:  MOVWF  1A
1235:  MOVF   78,W
1236:  MOVWF  19
1237:  MOVF   77,W
1238:  MOVWF  18
....................  
....................       res = y*res/r; 
1239:  MOVF   13,W
123A:  MOVWF  25
123B:  MOVF   12,W
123C:  MOVWF  24
123D:  MOVF   11,W
123E:  MOVWF  23
123F:  MOVF   10,W
1240:  MOVWF  22
1241:  MOVF   17,W
1242:  MOVWF  29
1243:  MOVF   16,W
1244:  MOVWF  28
1245:  MOVF   15,W
1246:  MOVWF  27
1247:  MOVF   14,W
1248:  MOVWF  26
1249:  BCF    0A.4
124A:  BSF    0A.3
124B:  BCF    03.5
124C:  BCF    03.6
124D:  CALL   2EC
124E:  BSF    0A.4
124F:  BCF    0A.3
1250:  MOVF   77,W
1251:  BSF    03.5
1252:  BSF    03.6
1253:  MOVWF  21
1254:  MOVF   78,W
1255:  MOVWF  22
1256:  MOVF   79,W
1257:  MOVWF  23
1258:  MOVF   7A,W
1259:  MOVWF  24
125A:  MOVWF  28
125B:  MOVF   23,W
125C:  MOVWF  27
125D:  MOVF   22,W
125E:  MOVWF  26
125F:  MOVF   21,W
1260:  MOVWF  25
1261:  MOVF   1B,W
1262:  MOVWF  2C
1263:  MOVF   1A,W
1264:  MOVWF  2B
1265:  MOVF   19,W
1266:  MOVWF  2A
1267:  MOVF   18,W
1268:  MOVWF  29
1269:  BCF    0A.4
126A:  BSF    0A.3
126B:  BCF    03.5
126C:  BCF    03.6
126D:  CALL   365
126E:  BSF    0A.4
126F:  BCF    0A.3
1270:  MOVF   7A,W
1271:  BSF    03.5
1272:  BSF    03.6
1273:  MOVWF  17
1274:  MOVF   79,W
1275:  MOVWF  16
1276:  MOVF   78,W
1277:  MOVWF  15
1278:  MOVF   77,W
1279:  MOVWF  14
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
127A:  MOVLW  01
127B:  MOVWF  22
127C:  MOVLW  6C
127D:  MOVWF  21
127E:  MOVF   21,W
127F:  MOVWF  04
1280:  BCF    03.7
1281:  BTFSC  22.0
1282:  BSF    03.7
1283:  MOVLW  7E
1284:  SUBWF  00,W
1285:  MOVWF  20
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1286:  BTFSS  20.7
1287:  GOTO   2A1
....................          r = -(float32)-n; 
1288:  MOVF   20,W
1289:  SUBLW  00
128A:  CLRF   27
128B:  MOVWF  26
128C:  BTFSC  26.7
128D:  DECF   27,F
128E:  BCF    0A.4
128F:  BSF    0A.3
1290:  BCF    03.5
1291:  BCF    03.6
1292:  CALL   5E3
1293:  BSF    0A.4
1294:  BCF    0A.3
1295:  MOVF   77,W
1296:  BSF    03.5
1297:  BSF    03.6
1298:  MOVWF  18
1299:  MOVF   78,W
129A:  XORLW  80
129B:  MOVWF  19
129C:  MOVF   79,W
129D:  MOVWF  1A
129E:  MOVF   7A,W
129F:  MOVWF  1B
....................       else 
12A0:  GOTO   2B7
....................          r = (float32)n; 
12A1:  CLRF   27
12A2:  MOVF   20,W
12A3:  MOVWF  26
12A4:  BTFSC  26.7
12A5:  DECF   27,F
12A6:  BCF    0A.4
12A7:  BSF    0A.3
12A8:  BCF    03.5
12A9:  BCF    03.6
12AA:  CALL   5E3
12AB:  BSF    0A.4
12AC:  BCF    0A.3
12AD:  MOVF   7A,W
12AE:  BSF    03.5
12AF:  BSF    03.6
12B0:  MOVWF  1B
12B1:  MOVF   79,W
12B2:  MOVWF  1A
12B3:  MOVF   78,W
12B4:  MOVWF  19
12B5:  MOVF   77,W
12B6:  MOVWF  18
....................  
....................       res += r*LN2; 
12B7:  MOVF   1B,W
12B8:  MOVWF  25
12B9:  MOVF   1A,W
12BA:  MOVWF  24
12BB:  MOVF   19,W
12BC:  MOVWF  23
12BD:  MOVF   18,W
12BE:  MOVWF  22
12BF:  MOVLW  18
12C0:  MOVWF  29
12C1:  MOVLW  72
12C2:  MOVWF  28
12C3:  MOVLW  31
12C4:  MOVWF  27
12C5:  MOVLW  7E
12C6:  MOVWF  26
12C7:  BCF    0A.4
12C8:  BSF    0A.3
12C9:  BCF    03.5
12CA:  BCF    03.6
12CB:  CALL   2EC
12CC:  BSF    0A.4
12CD:  BCF    0A.3
12CE:  BCF    03.1
12CF:  BSF    03.5
12D0:  BSF    03.6
12D1:  MOVF   17,W
12D2:  MOVWF  29
12D3:  MOVF   16,W
12D4:  MOVWF  28
12D5:  MOVF   15,W
12D6:  MOVWF  27
12D7:  MOVF   14,W
12D8:  MOVWF  26
12D9:  MOVF   7A,W
12DA:  MOVWF  2D
12DB:  MOVF   79,W
12DC:  MOVWF  2C
12DD:  MOVF   78,W
12DE:  MOVWF  2B
12DF:  MOVF   77,W
12E0:  MOVWF  2A
12E1:  BCF    0A.4
12E2:  BSF    0A.3
12E3:  BCF    03.5
12E4:  BCF    03.6
12E5:  CALL   433
12E6:  BSF    0A.4
12E7:  BCF    0A.3
12E8:  MOVF   7A,W
12E9:  BSF    03.5
12EA:  BSF    03.6
12EB:  MOVWF  17
12EC:  MOVF   79,W
12ED:  MOVWF  16
12EE:  MOVF   78,W
12EF:  MOVWF  15
12F0:  MOVF   77,W
12F1:  MOVWF  14
....................    } 
....................  
....................    else 
12F2:  GOTO   2FB
12F3:  BCF    03.5
12F4:  BCF    03.6
....................       res = 0.0; 
12F5:  BSF    03.5
12F6:  BSF    03.6
12F7:  CLRF   17
12F8:  CLRF   16
12F9:  CLRF   15
12FA:  CLRF   14
....................  
....................    return(res); 
12FB:  MOVF   14,W
12FC:  MOVWF  77
12FD:  MOVF   15,W
12FE:  MOVWF  78
12FF:  MOVF   16,W
1300:  MOVWF  79
1301:  MOVF   17,W
1302:  MOVWF  7A
.................... } 
1303:  BCF    03.5
1304:  BCF    03.6
1305:  RETLW  00
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
*
0E2F:  BSF    03.5
0E30:  BSF    03.6
0E31:  CLRF   25
0E32:  CLRF   24
0E33:  CLRF   23
0E34:  CLRF   22
0E35:  BCF    03.5
0E36:  MOVF   63,W
0E37:  BSF    03.5
0E38:  MOVWF  29
0E39:  BCF    03.5
0E3A:  MOVF   62,W
0E3B:  BSF    03.5
0E3C:  MOVWF  28
0E3D:  BCF    03.5
0E3E:  MOVF   61,W
0E3F:  BSF    03.5
0E40:  MOVWF  27
0E41:  BCF    03.5
0E42:  MOVF   60,W
0E43:  BSF    03.5
0E44:  MOVWF  26
0E45:  BCF    03.5
0E46:  BCF    03.6
0E47:  CALL   5A0
0E48:  BTFSC  03.0
0E49:  GOTO   64C
0E4A:  BTFSS  03.2
0E4B:  GOTO   696
....................      return(  exp(y*log(x)) ); 
0E4C:  BSF    03.6
0E4D:  MOVF   63,W
0E4E:  MOVWF  6F
0E4F:  MOVF   62,W
0E50:  MOVWF  6E
0E51:  MOVF   61,W
0E52:  MOVWF  6D
0E53:  MOVF   60,W
0E54:  MOVWF  6C
0E55:  BSF    0A.4
0E56:  BCF    0A.3
0E57:  BCF    03.6
0E58:  CALL   000
0E59:  BCF    0A.4
0E5A:  BSF    0A.3
0E5B:  BSF    03.6
0E5C:  MOVF   67,W
0E5D:  BSF    03.5
0E5E:  MOVWF  25
0E5F:  BCF    03.5
0E60:  MOVF   66,W
0E61:  BSF    03.5
0E62:  MOVWF  24
0E63:  BCF    03.5
0E64:  MOVF   65,W
0E65:  BSF    03.5
0E66:  MOVWF  23
0E67:  BCF    03.5
0E68:  MOVF   64,W
0E69:  BSF    03.5
0E6A:  MOVWF  22
0E6B:  MOVF   7A,W
0E6C:  MOVWF  29
0E6D:  MOVF   79,W
0E6E:  MOVWF  28
0E6F:  MOVF   78,W
0E70:  MOVWF  27
0E71:  MOVF   77,W
0E72:  MOVWF  26
0E73:  BCF    03.5
0E74:  BCF    03.6
0E75:  CALL   2EC
0E76:  MOVF   77,W
0E77:  BSF    03.6
0E78:  MOVWF  68
0E79:  MOVF   78,W
0E7A:  MOVWF  69
0E7B:  MOVF   79,W
0E7C:  MOVWF  6A
0E7D:  MOVF   7A,W
0E7E:  MOVWF  6B
0E7F:  BSF    03.5
0E80:  MOVWF  13
0E81:  BCF    03.5
0E82:  MOVF   6A,W
0E83:  BSF    03.5
0E84:  MOVWF  12
0E85:  BCF    03.5
0E86:  MOVF   69,W
0E87:  BSF    03.5
0E88:  MOVWF  11
0E89:  BCF    03.5
0E8A:  MOVF   68,W
0E8B:  BSF    03.5
0E8C:  MOVWF  10
0E8D:  BSF    0A.4
0E8E:  BCF    0A.3
0E8F:  BCF    03.5
0E90:  BCF    03.6
0E91:  CALL   306
0E92:  BCF    0A.4
0E93:  BSF    0A.3
0E94:  GOTO   6E9
....................    else 
0E95:  GOTO   6E9
....................      return(  -exp(y*log(-x)) ); 
0E96:  BSF    03.6
0E97:  MOVF   60,W
0E98:  MOVWF  68
0E99:  MOVF   61,W
0E9A:  XORLW  80
0E9B:  MOVWF  69
0E9C:  MOVF   62,W
0E9D:  MOVWF  6A
0E9E:  MOVF   63,W
0E9F:  MOVWF  6B
0EA0:  MOVWF  6F
0EA1:  MOVF   6A,W
0EA2:  MOVWF  6E
0EA3:  MOVF   69,W
0EA4:  MOVWF  6D
0EA5:  MOVF   68,W
0EA6:  MOVWF  6C
0EA7:  BSF    0A.4
0EA8:  BCF    0A.3
0EA9:  BCF    03.6
0EAA:  CALL   000
0EAB:  BCF    0A.4
0EAC:  BSF    0A.3
0EAD:  BSF    03.6
0EAE:  MOVF   67,W
0EAF:  BSF    03.5
0EB0:  MOVWF  25
0EB1:  BCF    03.5
0EB2:  MOVF   66,W
0EB3:  BSF    03.5
0EB4:  MOVWF  24
0EB5:  BCF    03.5
0EB6:  MOVF   65,W
0EB7:  BSF    03.5
0EB8:  MOVWF  23
0EB9:  BCF    03.5
0EBA:  MOVF   64,W
0EBB:  BSF    03.5
0EBC:  MOVWF  22
0EBD:  MOVF   7A,W
0EBE:  MOVWF  29
0EBF:  MOVF   79,W
0EC0:  MOVWF  28
0EC1:  MOVF   78,W
0EC2:  MOVWF  27
0EC3:  MOVF   77,W
0EC4:  MOVWF  26
0EC5:  BCF    03.5
0EC6:  BCF    03.6
0EC7:  CALL   2EC
0EC8:  MOVF   77,W
0EC9:  BSF    03.6
0ECA:  MOVWF  69
0ECB:  MOVF   78,W
0ECC:  MOVWF  6A
0ECD:  MOVF   79,W
0ECE:  MOVWF  6B
0ECF:  MOVF   7A,W
0ED0:  MOVWF  6C
0ED1:  BSF    03.5
0ED2:  MOVWF  13
0ED3:  BCF    03.5
0ED4:  MOVF   6B,W
0ED5:  BSF    03.5
0ED6:  MOVWF  12
0ED7:  BCF    03.5
0ED8:  MOVF   6A,W
0ED9:  BSF    03.5
0EDA:  MOVWF  11
0EDB:  BCF    03.5
0EDC:  MOVF   69,W
0EDD:  BSF    03.5
0EDE:  MOVWF  10
0EDF:  BSF    0A.4
0EE0:  BCF    0A.3
0EE1:  BCF    03.5
0EE2:  BCF    03.6
0EE3:  CALL   306
0EE4:  BCF    0A.4
0EE5:  BSF    0A.3
0EE6:  MOVLW  80
0EE7:  XORWF  78,F
0EE8:  GOTO   6E9
.................... } 
0EE9:  BSF    0A.3
0EEA:  BSF    0A.4
0EEB:  GOTO   37D (RETURN)
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... int pin1_status = 0; 
*
1815:  CLRF   29
.................... int1 is_updated = 1; 
1816:  BSF    2A.0
....................  
.................... #include "esp8266.c" 
.................... #define _ESP8266_RX_BUFFER_MAX   50 
....................  
.................... unsigned char ESP8266_rx_buffer[_ESP8266_RX_BUFFER_MAX]; 
.................... unsigned int16 ESP8266_rx_index = 0; 
1817:  CLRF   5D
1818:  CLRF   5E
....................  
.................... int1 status_ok = 0; 
1819:  BCF    2A.1
.................... int1 start_RST = 0; 
181A:  BCF    2A.2
.................... int1 start_CIPSEND = 0; 
181B:  BCF    2A.3
.................... int1 start_CONNECT = 0; 
181C:  BCF    2A.4
.................... int1 start_CLOSED = 0; 
181D:  BCF    2A.5
.................... int1 start_HTTP = 0; 
181E:  BCF    2A.6
.................... int1 get_id_connect = 0; 
181F:  BCF    2A.7
....................  
.................... unsigned char id_connect; 
....................  
.................... unsigned char flag_OK[] = "OK\r\n"; 
1820:  MOVLW  4F
1821:  MOVWF  60
1822:  MOVLW  4B
1823:  MOVWF  61
1824:  MOVLW  0D
1825:  MOVWF  62
1826:  MOVLW  0A
1827:  MOVWF  63
1828:  CLRF   64
.................... unsigned char flag_RST[] = "ready\r\n"; 
1829:  MOVLW  72
182A:  MOVWF  65
182B:  MOVLW  65
182C:  MOVWF  66
182D:  MOVLW  61
182E:  MOVWF  67
182F:  MOVLW  64
1830:  MOVWF  68
1831:  MOVLW  79
1832:  MOVWF  69
1833:  MOVLW  0D
1834:  MOVWF  6A
1835:  MOVLW  0A
1836:  MOVWF  6B
1837:  CLRF   6C
.................... unsigned char flag_CIPSEND[] = "OK\r\n>"; 
1838:  MOVLW  4F
1839:  MOVWF  6D
183A:  MOVLW  4B
183B:  MOVWF  6E
183C:  MOVLW  0D
183D:  MOVWF  6F
183E:  MOVLW  0A
183F:  MOVWF  70
1840:  MOVLW  3E
1841:  MOVWF  71
1842:  CLRF   72
.................... //unsigned char flag_CONNECT[] = "CONNECT\r\n"; 
.................... unsigned char flag_CLOSED[] = ",CLOSED\r\n"; 
1843:  MOVLW  2C
1844:  BSF    03.5
1845:  MOVWF  20
1846:  MOVLW  43
1847:  MOVWF  21
1848:  MOVLW  4C
1849:  MOVWF  22
184A:  MOVLW  4F
184B:  MOVWF  23
184C:  MOVLW  53
184D:  MOVWF  24
184E:  MOVLW  45
184F:  MOVWF  25
1850:  MOVLW  44
1851:  MOVWF  26
1852:  MOVLW  0D
1853:  MOVWF  27
1854:  MOVLW  0A
1855:  MOVWF  28
1856:  CLRF   29
.................... unsigned char flag_HTTP[] = "GET / HTTP/1.1"; 
1857:  MOVLW  47
1858:  MOVWF  2A
1859:  MOVLW  45
185A:  MOVWF  2B
185B:  MOVLW  54
185C:  MOVWF  2C
185D:  MOVLW  20
185E:  MOVWF  2D
185F:  MOVLW  2F
1860:  MOVWF  2E
1861:  MOVLW  20
1862:  MOVWF  2F
1863:  MOVLW  48
1864:  MOVWF  30
1865:  MOVLW  54
1866:  MOVWF  31
1867:  MOVWF  32
1868:  MOVLW  50
1869:  MOVWF  33
186A:  MOVLW  2F
186B:  MOVWF  34
186C:  MOVLW  31
186D:  MOVWF  35
186E:  MOVLW  2E
186F:  MOVWF  36
1870:  MOVLW  31
1871:  MOVWF  37
1872:  CLRF   38
.................... unsigned char flag_IPD[] = "+IPD,"; 
1873:  MOVLW  2B
1874:  MOVWF  39
1875:  MOVLW  49
1876:  MOVWF  3A
1877:  MOVLW  50
1878:  MOVWF  3B
1879:  MOVLW  44
187A:  MOVWF  3C
187B:  MOVLW  2C
187C:  MOVWF  3D
187D:  CLRF   3E
....................  
.................... unsigned char flag_PIN1_TAT[]    = "GET /?pin=TAT"; 
187E:  MOVLW  47
187F:  MOVWF  3F
1880:  MOVLW  45
1881:  MOVWF  40
1882:  MOVLW  54
1883:  MOVWF  41
1884:  MOVLW  20
1885:  MOVWF  42
1886:  MOVLW  2F
1887:  MOVWF  43
1888:  MOVLW  3F
1889:  MOVWF  44
188A:  MOVLW  70
188B:  MOVWF  45
188C:  MOVLW  69
188D:  MOVWF  46
188E:  MOVLW  6E
188F:  MOVWF  47
1890:  MOVLW  3D
1891:  MOVWF  48
1892:  MOVLW  54
1893:  MOVWF  49
1894:  MOVLW  41
1895:  MOVWF  4A
1896:  MOVLW  54
1897:  MOVWF  4B
1898:  CLRF   4C
.................... unsigned char flag_PIN1_MUC1[]   = "GET /?pin=MUC1"; 
1899:  MOVLW  47
189A:  MOVWF  4D
189B:  MOVLW  45
189C:  MOVWF  4E
189D:  MOVLW  54
189E:  MOVWF  4F
189F:  MOVLW  20
18A0:  MOVWF  50
18A1:  MOVLW  2F
18A2:  MOVWF  51
18A3:  MOVLW  3F
18A4:  MOVWF  52
18A5:  MOVLW  70
18A6:  MOVWF  53
18A7:  MOVLW  69
18A8:  MOVWF  54
18A9:  MOVLW  6E
18AA:  MOVWF  55
18AB:  MOVLW  3D
18AC:  MOVWF  56
18AD:  MOVLW  4D
18AE:  MOVWF  57
18AF:  MOVLW  55
18B0:  MOVWF  58
18B1:  MOVLW  43
18B2:  MOVWF  59
18B3:  MOVLW  31
18B4:  MOVWF  5A
18B5:  CLRF   5B
.................... unsigned char flag_PIN1_MUC2[]   = "GET /?pin=MUC2"; 
18B6:  MOVLW  47
18B7:  MOVWF  5C
18B8:  MOVLW  45
18B9:  MOVWF  5D
18BA:  MOVLW  54
18BB:  MOVWF  5E
18BC:  MOVLW  20
18BD:  MOVWF  5F
18BE:  MOVLW  2F
18BF:  MOVWF  60
18C0:  MOVLW  3F
18C1:  MOVWF  61
18C2:  MOVLW  70
18C3:  MOVWF  62
18C4:  MOVLW  69
18C5:  MOVWF  63
18C6:  MOVLW  6E
18C7:  MOVWF  64
18C8:  MOVLW  3D
18C9:  MOVWF  65
18CA:  MOVLW  4D
18CB:  MOVWF  66
18CC:  MOVLW  55
18CD:  MOVWF  67
18CE:  MOVLW  43
18CF:  MOVWF  68
18D0:  MOVLW  32
18D1:  MOVWF  69
18D2:  CLRF   6A
....................  
.................... unsigned char flag_OK_count = 0; 
18D3:  CLRF   73
.................... unsigned char flag_RST_count = 0; 
18D4:  CLRF   74
.................... unsigned char flag_CIPSEND_count = 0; 
18D5:  CLRF   75
.................... unsigned char flag_CONNECT_count = 0; 
18D6:  CLRF   76
.................... unsigned char flag_CLOSED_count = 0; 
18D7:  CLRF   7C
.................... unsigned char flag_HTTP_count = 0; 
18D8:  CLRF   7D
.................... unsigned char flag_IPD_count = 0; 
18D9:  CLRF   7E
....................  
.................... unsigned char flag_PIN1_TAT_count = 0; 
18DA:  CLRF   6B
.................... unsigned char flag_PIN1_MUC1_count = 0; 
18DB:  CLRF   6C
.................... unsigned char flag_PIN1_MUC2_count = 0; 
18DC:  CLRF   6D
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Kiem tra ket noi voi module Wifi ESP8266 da thanh cong chua 
.................... Tham so     :      Khong. 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_AT() 
.................... { 
....................    status_ok = 0; 
*
06FC:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT\r\n"); 
06FD:  BSF    03.6
06FE:  CLRF   5C
06FF:  MOVF   5C,W
0700:  BCF    03.6
0701:  CALL   035
0702:  BSF    03.6
0703:  INCF   5C,F
0704:  MOVWF  77
0705:  BCF    03.6
0706:  BTFSS  0C.4
0707:  GOTO   706
0708:  MOVWF  19
0709:  MOVLW  04
070A:  BSF    03.6
070B:  SUBWF  5C,W
070C:  BTFSS  03.2
070D:  GOTO   6FF
....................     
....................    while (status_ok == 0) {} 
070E:  BCF    03.6
070F:  BTFSS  2A.1
0710:  GOTO   70F
....................    status_ok = 0; 
0711:  BCF    2A.1
.................... } 
0712:  BSF    0A.3
0713:  BSF    0A.4
0714:  GOTO   166 (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Giu lenh reset module Wifi ESP8266  
.................... Tham so     :      Khong. 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_RST() 
.................... { 
....................    start_RST = 0; 
0715:  BCF    2A.2
....................     
....................    fprintf(ESP_STR, "AT+RST\r\n"); 
0716:  BSF    03.6
0717:  CLRF   5C
0718:  MOVF   5C,W
0719:  BCF    03.6
071A:  CALL   03E
071B:  BSF    03.6
071C:  INCF   5C,F
071D:  MOVWF  77
071E:  BCF    03.6
071F:  BTFSS  0C.4
0720:  GOTO   71F
0721:  MOVWF  19
0722:  MOVLW  08
0723:  BSF    03.6
0724:  SUBWF  5C,W
0725:  BTFSS  03.2
0726:  GOTO   718
....................     
....................    while (start_RST == 0) {} 
0727:  BCF    03.6
0728:  BTFSS  2A.2
0729:  GOTO   728
....................    start_RST = 0; 
072A:  BCF    2A.2
.................... } 
072B:  BSF    0A.3
072C:  BSF    0A.4
072D:  GOTO   174 (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Chon mode thiet lap cho module Wifi ESP8266  
.................... Tham so     :      mode : chon che do cho mode esp8266  
....................                         mode = 1: Station mode 
....................                         mode = 2: Access Point mode 
....................                         mode = 3: Default both Station & AP mode 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CWMODE(unsigned char mode) 
.................... { 
....................    status_ok = 0; 
*
0787:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT+CWMODE=%u\r\n", mode); 
0788:  BSF    03.6
0789:  CLRF   5D
078A:  MOVF   5D,W
078B:  BCF    03.6
078C:  CALL   04B
078D:  BSF    03.6
078E:  INCF   5D,F
078F:  MOVWF  77
0790:  BCF    03.6
0791:  BTFSS  0C.4
0792:  GOTO   791
0793:  MOVWF  19
0794:  MOVLW  0A
0795:  BSF    03.6
0796:  SUBWF  5D,W
0797:  BTFSS  03.2
0798:  GOTO   78A
0799:  MOVF   5C,W
079A:  MOVWF  60
079B:  MOVLW  1B
079C:  MOVWF  61
079D:  BCF    03.6
079E:  CALL   745
079F:  MOVLW  0D
07A0:  BTFSS  0C.4
07A1:  GOTO   7A0
07A2:  MOVWF  19
07A3:  MOVLW  0A
07A4:  BTFSS  0C.4
07A5:  GOTO   7A4
07A6:  MOVWF  19
....................     
....................    while (status_ok == 0) {} 
07A7:  BTFSS  2A.1
07A8:  GOTO   7A7
....................    status_ok = 0; 
07A9:  BCF    2A.1
.................... } 
07AA:  BSF    0A.3
07AB:  BSF    0A.4
07AC:  GOTO   186 (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Ket noi WiFi cho module WiFi ESP8266  
.................... Tham so     :      *ssid : ten Wifi muon ket noi 
....................                    *pass : pass Wifi muon ket noi 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CWJAP(unsigned char *ssid, unsigned char *pass) 
.................... { 
....................    status_ok = 0; 
*
094A:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass); 
094B:  BSF    03.6
094C:  CLRF   60
094D:  MOVF   60,W
094E:  BCF    0A.3
094F:  BCF    03.6
0950:  CALL   05E
0951:  BSF    0A.3
0952:  BSF    03.6
0953:  INCF   60,F
0954:  MOVWF  77
0955:  BCF    03.6
0956:  BTFSS  0C.4
0957:  GOTO   156
0958:  MOVWF  19
0959:  MOVLW  0A
095A:  BSF    03.6
095B:  SUBWF  60,W
095C:  BTFSS  03.2
095D:  GOTO   14D
095E:  MOVF   5C,W
095F:  MOVWF  04
0960:  BCF    03.7
0961:  BTFSC  5D.0
0962:  BSF    03.7
0963:  MOVLW  00
0964:  IORWF  00,W
0965:  BTFSC  03.2
0966:  GOTO   16F
0967:  MOVF   00,W
0968:  BCF    03.6
0969:  BTFSS  0C.4
096A:  GOTO   169
096B:  MOVWF  19
096C:  INCF   04,F
096D:  BSF    03.6
096E:  GOTO   163
096F:  MOVLW  22
0970:  BCF    03.6
0971:  BTFSS  0C.4
0972:  GOTO   171
0973:  MOVWF  19
0974:  MOVLW  2C
0975:  BTFSS  0C.4
0976:  GOTO   175
0977:  MOVWF  19
0978:  MOVLW  22
0979:  BTFSS  0C.4
097A:  GOTO   179
097B:  MOVWF  19
097C:  BSF    03.6
097D:  MOVF   5E,W
097E:  MOVWF  04
097F:  BCF    03.7
0980:  BTFSC  5F.0
0981:  BSF    03.7
0982:  MOVLW  00
0983:  IORWF  00,W
0984:  BTFSC  03.2
0985:  GOTO   18E
0986:  MOVF   00,W
0987:  BCF    03.6
0988:  BTFSS  0C.4
0989:  GOTO   188
098A:  MOVWF  19
098B:  INCF   04,F
098C:  BSF    03.6
098D:  GOTO   182
098E:  MOVLW  22
098F:  BCF    03.6
0990:  BTFSS  0C.4
0991:  GOTO   190
0992:  MOVWF  19
0993:  MOVLW  0D
0994:  BTFSS  0C.4
0995:  GOTO   194
0996:  MOVWF  19
0997:  MOVLW  0A
0998:  BTFSS  0C.4
0999:  GOTO   198
099A:  MOVWF  19
....................     
....................    while (status_ok == 0) {} 
099B:  BTFSS  2A.1
099C:  GOTO   19B
....................    status_ok = 0; 
099D:  BCF    2A.1
.................... } 
099E:  BSF    0A.3
099F:  BSF    0A.4
09A0:  GOTO   19D (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Dat dia chi IP tinh cho ESP8266 o mode Station  
.................... Tham so     :      *ip_address: dia chi IP tinh 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CIPSTA(unsigned char* ip_address) 
.................... { 
....................    status_ok = 0; 
*
07AD:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT+CIPSTA=\"%s\"\r\n", ip_address); 
07AE:  BSF    03.6
07AF:  CLRF   5E
07B0:  MOVF   5E,W
07B1:  BCF    03.6
07B2:  CALL   077
07B3:  BSF    03.6
07B4:  INCF   5E,F
07B5:  MOVWF  77
07B6:  BCF    03.6
07B7:  BTFSS  0C.4
07B8:  GOTO   7B7
07B9:  MOVWF  19
07BA:  MOVLW  0B
07BB:  BSF    03.6
07BC:  SUBWF  5E,W
07BD:  BTFSS  03.2
07BE:  GOTO   7B0
07BF:  MOVF   5C,W
07C0:  MOVWF  04
07C1:  BCF    03.7
07C2:  BTFSC  5D.0
07C3:  BSF    03.7
07C4:  MOVLW  00
07C5:  IORWF  00,W
07C6:  BTFSC  03.2
07C7:  GOTO   7D0
07C8:  MOVF   00,W
07C9:  BCF    03.6
07CA:  BTFSS  0C.4
07CB:  GOTO   7CA
07CC:  MOVWF  19
07CD:  INCF   04,F
07CE:  BSF    03.6
07CF:  GOTO   7C4
07D0:  MOVLW  22
07D1:  BCF    03.6
07D2:  BTFSS  0C.4
07D3:  GOTO   7D2
07D4:  MOVWF  19
07D5:  MOVLW  0D
07D6:  BTFSS  0C.4
07D7:  GOTO   7D6
07D8:  MOVWF  19
07D9:  MOVLW  0A
07DA:  BTFSS  0C.4
07DB:  GOTO   7DA
07DC:  MOVWF  19
....................     
....................    while (status_ok == 0) {} 
07DD:  BTFSS  2A.1
07DE:  GOTO   7DD
....................    status_ok = 0; 
07DF:  BCF    2A.1
.................... } 
07E0:  BSF    0A.3
07E1:  BSF    0A.4
07E2:  GOTO   1B4 (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Dat timeout cho 1 ket noi TCP server tu ESP8266  
.................... Tham so     :      timeout: 1 -> 7200 (s) 
....................                             0 - khong co timeout, not recommended 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CIPSTO(unsigned int16 timeout) 
.................... { 
....................    status_ok = 0; 
*
0A5F:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT+CIPSTO=%lu\r\n", timeout); 
0A60:  BSF    03.6
0A61:  CLRF   5E
0A62:  MOVF   5E,W
0A63:  BCF    0A.3
0A64:  BCF    03.6
0A65:  CALL   08C
0A66:  BSF    0A.3
0A67:  BSF    03.6
0A68:  INCF   5E,F
0A69:  MOVWF  77
0A6A:  BCF    03.6
0A6B:  BTFSS  0C.4
0A6C:  GOTO   26B
0A6D:  MOVWF  19
0A6E:  MOVLW  0A
0A6F:  BSF    03.6
0A70:  SUBWF  5E,W
0A71:  BTFSS  03.2
0A72:  GOTO   262
0A73:  MOVLW  10
0A74:  MOVWF  04
0A75:  MOVF   5D,W
0A76:  MOVWF  61
0A77:  MOVF   5C,W
0A78:  MOVWF  60
0A79:  BCF    03.6
0A7A:  CALL   1CB
0A7B:  MOVLW  0D
0A7C:  BTFSS  0C.4
0A7D:  GOTO   27C
0A7E:  MOVWF  19
0A7F:  MOVLW  0A
0A80:  BTFSS  0C.4
0A81:  GOTO   280
0A82:  MOVWF  19
....................     
....................    while (status_ok == 0) {} 
0A83:  BTFSS  2A.1
0A84:  GOTO   283
....................    status_ok = 0; 
0A85:  BCF    2A.1
.................... } 
0A86:  BSF    0A.3
0A87:  BSF    0A.4
0A88:  GOTO   1ED (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      kich hoat da ket noi (enable multiple connection) cho module Wifi ESP8266  
.................... Tham so     :      mode : chon che do  
....................                         mode = 0: single connection 
....................                         mode = 1: multiple connection 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CIPMUX(unsigned char mode) 
.................... { 
....................    status_ok = 0; 
*
09A1:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT+CIPMUX=%u\r\n", mode); 
09A2:  BSF    03.6
09A3:  CLRF   5D
09A4:  MOVF   5D,W
09A5:  BCF    0A.3
09A6:  BCF    03.6
09A7:  CALL   0A0
09A8:  BSF    0A.3
09A9:  BSF    03.6
09AA:  INCF   5D,F
09AB:  MOVWF  77
09AC:  BCF    03.6
09AD:  BTFSS  0C.4
09AE:  GOTO   1AD
09AF:  MOVWF  19
09B0:  MOVLW  0A
09B1:  BSF    03.6
09B2:  SUBWF  5D,W
09B3:  BTFSS  03.2
09B4:  GOTO   1A4
09B5:  MOVF   5C,W
09B6:  MOVWF  60
09B7:  MOVLW  1B
09B8:  MOVWF  61
09B9:  BCF    0A.3
09BA:  BCF    03.6
09BB:  CALL   745
09BC:  BSF    0A.3
09BD:  MOVLW  0D
09BE:  BTFSS  0C.4
09BF:  GOTO   1BE
09C0:  MOVWF  19
09C1:  MOVLW  0A
09C2:  BTFSS  0C.4
09C3:  GOTO   1C2
09C4:  MOVWF  19
....................     
....................    while (status_ok == 0) {} 
09C5:  BTFSS  2A.1
09C6:  GOTO   1C5
....................    status_ok = 0; 
09C7:  BCF    2A.1
.................... } 
09C8:  BSF    0A.3
09C9:  BSF    0A.4
09CA:  GOTO   1C9 (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      kich hoat server mo port cho module ESP8266  
.................... Tham so     :      mode : chon che do  
....................                         mode = 0: xoa server 
....................                         mode = 1: tao server 
....................                    port : cong port giao tiep 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CIPSERVER(unsigned char mode, unsigned int16 port) 
.................... { 
....................    status_ok = 0; 
*
0A28:  BCF    2A.1
....................     
....................    fprintf(ESP_STR, "AT+CIPSERVER=%u,%lu\r\n", mode, port); 
0A29:  BSF    03.6
0A2A:  CLRF   5F
0A2B:  MOVF   5F,W
0A2C:  BCF    0A.3
0A2D:  BCF    03.6
0A2E:  CALL   0B3
0A2F:  BSF    0A.3
0A30:  BSF    03.6
0A31:  INCF   5F,F
0A32:  MOVWF  77
0A33:  BCF    03.6
0A34:  BTFSS  0C.4
0A35:  GOTO   234
0A36:  MOVWF  19
0A37:  MOVLW  0D
0A38:  BSF    03.6
0A39:  SUBWF  5F,W
0A3A:  BTFSS  03.2
0A3B:  GOTO   22B
0A3C:  MOVF   5C,W
0A3D:  MOVWF  60
0A3E:  MOVLW  1B
0A3F:  MOVWF  61
0A40:  BCF    0A.3
0A41:  BCF    03.6
0A42:  CALL   745
0A43:  BSF    0A.3
0A44:  MOVLW  2C
0A45:  BTFSS  0C.4
0A46:  GOTO   245
0A47:  MOVWF  19
0A48:  MOVLW  10
0A49:  MOVWF  04
0A4A:  BSF    03.6
0A4B:  MOVF   5E,W
0A4C:  MOVWF  61
0A4D:  MOVF   5D,W
0A4E:  MOVWF  60
0A4F:  BCF    03.6
0A50:  CALL   1CB
0A51:  MOVLW  0D
0A52:  BTFSS  0C.4
0A53:  GOTO   252
0A54:  MOVWF  19
0A55:  MOVLW  0A
0A56:  BTFSS  0C.4
0A57:  GOTO   256
0A58:  MOVWF  19
....................     
....................    while (status_ok == 0) {} 
0A59:  BTFSS  2A.1
0A5A:  GOTO   259
....................    status_ok = 0; 
0A5B:  BCF    2A.1
.................... } 
0A5C:  BSF    0A.3
0A5D:  BSF    0A.4
0A5E:  GOTO   1DC (RETURN)
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Thiet lap ket noi toi server (ESP8266 la client) 
.................... Tham so     :      - id: 
....................                    - type: 
....................                    - addr: 
....................                    - port: 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CIPSTART(unsigned char id, unsigned char* type, unsigned char* ip_address, unsigned int16 port ) 
.................... { 
....................    status_ok = 0; 
....................     
....................    fprintf(ESP_STR, "AT+CIPSTART=%u,\"%s\",\"%s\",%lu\r\n", id, type, ip_address, port); 
....................     
....................    while (status_ok == 0) {} 
....................    status_ok = 0; 
.................... } 
....................  
.................... /*********************************************************************************************** 
.................... Chuc nang   :      Gui du lieu 
.................... Tham so     :      - id: 
....................                    - type: 
....................                    - addr: 
....................                    - port: 
.................... Tra ve      :      Khong. 
.................... ***********************************************************************************************/ 
.................... void ESP8266_CIPSEND(unsigned char id, unsigned int16 length) 
.................... { 
....................    start_CIPSEND = 0; 
*
159B:  BCF    03.6
159C:  BCF    2A.3
....................     
....................    fprintf(ESP_STR, "AT+CIPSEND=%c,%lu\r\n", id, length); 
159D:  BSF    03.6
159E:  CLRF   5F
159F:  MOVF   5F,W
15A0:  BCF    0A.4
15A1:  BCF    03.6
15A2:  CALL   0CD
15A3:  BSF    0A.4
15A4:  BSF    03.6
15A5:  INCF   5F,F
15A6:  MOVWF  77
15A7:  BCF    03.6
15A8:  BTFSS  0C.4
15A9:  GOTO   5A8
15AA:  MOVWF  19
15AB:  MOVLW  0B
15AC:  BSF    03.6
15AD:  SUBWF  5F,W
15AE:  BTFSS  03.2
15AF:  GOTO   59F
15B0:  MOVF   5C,W
15B1:  BCF    03.6
15B2:  BTFSS  0C.4
15B3:  GOTO   5B2
15B4:  MOVWF  19
15B5:  MOVLW  2C
15B6:  BTFSS  0C.4
15B7:  GOTO   5B6
15B8:  MOVWF  19
15B9:  MOVLW  10
15BA:  MOVWF  04
15BB:  BSF    03.6
15BC:  MOVF   5E,W
15BD:  MOVWF  61
15BE:  MOVF   5D,W
15BF:  MOVWF  60
15C0:  BCF    0A.4
15C1:  BSF    0A.3
15C2:  BCF    03.6
15C3:  CALL   1CB
15C4:  BSF    0A.4
15C5:  BCF    0A.3
15C6:  MOVLW  0D
15C7:  BTFSS  0C.4
15C8:  GOTO   5C7
15C9:  MOVWF  19
15CA:  MOVLW  0A
15CB:  BTFSS  0C.4
15CC:  GOTO   5CB
15CD:  MOVWF  19
....................     
....................    while (start_CIPSEND == 0) {} 
15CE:  BTFSS  2A.3
15CF:  GOTO   5CE
....................    start_CIPSEND = 0; 
15D0:  BCF    2A.3
.................... } 
....................  
....................  
....................  
....................  
.................... void ESP8266_clearBuffer() 
.................... { 
....................    unsigned int16 i; 
....................    ESP8266_rx_index = 0; 
*
07E3:  CLRF   5E
07E4:  CLRF   5D
....................     
....................    for (i = 0; i < _ESP8266_RX_BUFFER_MAX; i++) 
07E5:  BSF    03.6
07E6:  CLRF   5D
07E7:  CLRF   5C
07E8:  MOVF   5D,F
07E9:  BTFSS  03.2
07EA:  GOTO   7FA
07EB:  MOVF   5C,W
07EC:  SUBLW  31
07ED:  BTFSS  03.0
07EE:  GOTO   7FA
....................    { 
....................       ESP8266_rx_buffer[i] = 0; 
07EF:  MOVLW  2B
07F0:  ADDWF  5C,W
07F1:  MOVWF  04
07F2:  BCF    03.7
07F3:  BTFSC  5D.0
07F4:  BSF    03.7
07F5:  CLRF   00
....................    } 
07F6:  INCF   5C,F
07F7:  BTFSC  03.2
07F8:  INCF   5D,F
07F9:  GOTO   7E8
.................... } 
07FA:  BCF    03.6
07FB:  RETLW  00
....................  
.................... void ESP8266_executeBuffer(unsigned char rx_data) 
.................... { 
....................    ESP8266_rx_buffer[ESP8266_rx_index++] = rx_data; 
*
05BB:  BCF    03.5
05BC:  BCF    03.6
05BD:  MOVF   5E,W
05BE:  MOVWF  7A
05BF:  MOVF   5D,W
05C0:  INCF   5D,F
05C1:  BTFSC  03.2
05C2:  INCF   5E,F
05C3:  BSF    03.5
05C4:  BSF    03.6
05C5:  MOVWF  39
05C6:  MOVF   7A,W
05C7:  MOVWF  3A
05C8:  MOVLW  2B
05C9:  ADDWF  39,W
05CA:  MOVWF  04
05CB:  BCF    03.7
05CC:  BTFSC  3A.0
05CD:  BSF    03.7
05CE:  MOVF   38,W
05CF:  MOVWF  00
....................     
....................    if (ESP8266_rx_index >= _ESP8266_RX_BUFFER_MAX) 
05D0:  BCF    03.5
05D1:  BCF    03.6
05D2:  MOVF   5E,F
05D3:  BTFSS  03.2
05D4:  GOTO   5D9
05D5:  MOVF   5D,W
05D6:  SUBLW  31
05D7:  BTFSC  03.0
05D8:  GOTO   5DB
....................       ESP8266_rx_index = 0; 
05D9:  CLRF   5E
05DA:  CLRF   5D
....................     
....................    //-----------------------Xu ly cac ban tin mac dinh------------------------- 
....................     
....................    //Response from AT 
....................    if (rx_data == flag_OK[flag_OK_count]) 
05DB:  MOVLW  60
05DC:  ADDWF  73,W
05DD:  MOVWF  04
05DE:  BCF    03.7
05DF:  MOVF   00,W
05E0:  BSF    03.5
05E1:  BSF    03.6
05E2:  SUBWF  38,W
05E3:  BTFSS  03.2
05E4:  GOTO   5F7
....................    { 
....................       flag_OK_count++; 
05E5:  INCF   73,F
....................        
....................       if (flag_OK_count == 4) 
05E6:  MOVF   73,W
05E7:  SUBLW  04
05E8:  BTFSS  03.2
05E9:  GOTO   5F1
....................       { 
....................          status_ok = 1; 
05EA:  BCF    03.5
05EB:  BCF    03.6
05EC:  BSF    2A.1
....................          flag_OK_count = 0; 
05ED:  CLRF   73
....................       } 
....................       else 
05EE:  GOTO   5F4
05EF:  BSF    03.5
05F0:  BSF    03.6
....................       { 
....................          status_ok = 0; 
05F1:  BCF    03.5
05F2:  BCF    03.6
05F3:  BCF    2A.1
....................       } 
....................    } 
....................    else 
05F4:  GOTO   5FA
05F5:  BSF    03.5
05F6:  BSF    03.6
....................    { 
....................       flag_OK_count = 0; 
05F7:  CLRF   73
05F8:  BCF    03.5
05F9:  BCF    03.6
....................    } 
....................     
....................    //Response from AT+RST 
....................    if (rx_data == flag_RST[flag_RST_count]) 
05FA:  MOVLW  65
05FB:  ADDWF  74,W
05FC:  MOVWF  04
05FD:  BCF    03.7
05FE:  MOVF   00,W
05FF:  BSF    03.5
0600:  BSF    03.6
0601:  SUBWF  38,W
0602:  BTFSS  03.2
0603:  GOTO   616
....................    { 
....................       flag_RST_count++; 
0604:  INCF   74,F
....................        
....................       if (flag_RST_count == 7) 
0605:  MOVF   74,W
0606:  SUBLW  07
0607:  BTFSS  03.2
0608:  GOTO   610
....................       { 
....................          start_RST = 1; 
0609:  BCF    03.5
060A:  BCF    03.6
060B:  BSF    2A.2
....................          flag_RST_count = 0; 
060C:  CLRF   74
....................       } 
....................       else 
060D:  GOTO   613
060E:  BSF    03.5
060F:  BSF    03.6
....................       { 
....................          start_RST = 0; 
0610:  BCF    03.5
0611:  BCF    03.6
0612:  BCF    2A.2
....................       } 
....................    } 
....................    else 
0613:  GOTO   619
0614:  BSF    03.5
0615:  BSF    03.6
....................    { 
....................       flag_RST_count = 0; 
0616:  CLRF   74
0617:  BCF    03.5
0618:  BCF    03.6
....................    } 
....................     
....................    //Response from AT+CIPSEND 
....................    if (rx_data == flag_CIPSEND[flag_CIPSEND_count]) 
0619:  MOVLW  6D
061A:  ADDWF  75,W
061B:  MOVWF  04
061C:  BCF    03.7
061D:  MOVF   00,W
061E:  BSF    03.5
061F:  BSF    03.6
0620:  SUBWF  38,W
0621:  BTFSS  03.2
0622:  GOTO   635
....................    { 
....................       flag_CIPSEND_count++; 
0623:  INCF   75,F
....................       if (flag_CIPSEND_count == 5) 
0624:  MOVF   75,W
0625:  SUBLW  05
0626:  BTFSS  03.2
0627:  GOTO   62F
....................       { 
....................          start_CIPSEND = 1; 
0628:  BCF    03.5
0629:  BCF    03.6
062A:  BSF    2A.3
....................          flag_CIPSEND_count = 0; 
062B:  CLRF   75
....................       } 
....................       else 
062C:  GOTO   632
062D:  BSF    03.5
062E:  BSF    03.6
....................       { 
....................          start_CIPSEND = 0; 
062F:  BCF    03.5
0630:  BCF    03.6
0631:  BCF    2A.3
....................       } 
....................    } 
....................    else 
0632:  GOTO   638
0633:  BSF    03.5
0634:  BSF    03.6
....................    { 
....................       flag_CIPSEND_count = 0; 
0635:  CLRF   75
0636:  BCF    03.5
0637:  BCF    03.6
....................    } 
....................     
....................    //Response from +IPD: when TCP client terminates connection 
....................    if (rx_data == flag_CLOSED[flag_CLOSED_count]) 
0638:  MOVLW  A0
0639:  ADDWF  7C,W
063A:  MOVWF  04
063B:  BCF    03.7
063C:  MOVF   00,W
063D:  BSF    03.5
063E:  BSF    03.6
063F:  SUBWF  38,W
0640:  BTFSS  03.2
0641:  GOTO   654
....................    { 
....................       flag_CLOSED_count++; 
0642:  INCF   7C,F
....................       if (flag_CLOSED_count == 9) 
0643:  MOVF   7C,W
0644:  SUBLW  09
0645:  BTFSS  03.2
0646:  GOTO   64E
....................       { 
....................          start_CLOSED = 1; 
0647:  BCF    03.5
0648:  BCF    03.6
0649:  BSF    2A.5
....................           
....................          flag_CLOSED_count = 0; 
064A:  CLRF   7C
....................       } 
....................       else 
064B:  GOTO   651
064C:  BSF    03.5
064D:  BSF    03.6
....................       { 
....................          start_CLOSED = 0; 
064E:  BCF    03.5
064F:  BCF    03.6
0650:  BCF    2A.5
....................       } 
....................    } 
....................    else 
0651:  GOTO   657
0652:  BSF    03.5
0653:  BSF    03.6
....................    { 
....................       flag_CONNECT_count = 0; 
0654:  CLRF   76
0655:  BCF    03.5
0656:  BCF    03.6
....................    } 
....................     
....................    //Response from... 
....................    if (rx_data == flag_HTTP[flag_HTTP_count]) 
0657:  MOVLW  AA
0658:  ADDWF  7D,W
0659:  MOVWF  04
065A:  BCF    03.7
065B:  MOVF   00,W
065C:  BSF    03.5
065D:  BSF    03.6
065E:  SUBWF  38,W
065F:  BTFSS  03.2
0660:  GOTO   66E
....................    { 
....................       flag_HTTP_count++; 
0661:  INCF   7D,F
....................       if (flag_HTTP_count == 14) 
0662:  MOVF   7D,W
0663:  SUBLW  0E
0664:  BTFSS  03.2
0665:  GOTO   66D
....................       {          
....................          start_HTTP = 1; 
0666:  BCF    03.5
0667:  BCF    03.6
0668:  BSF    2A.6
....................          is_updated = 0; 
0669:  BCF    2A.0
....................          flag_HTTP_count = 0; 
066A:  CLRF   7D
066B:  BSF    03.5
066C:  BSF    03.6
....................       } 
....................    } 
....................    else 
066D:  GOTO   66F
....................    { 
....................       flag_HTTP_count = 0; 
066E:  CLRF   7D
....................    } 
....................     
....................    if (get_id_connect) 
066F:  BCF    03.5
0670:  BCF    03.6
0671:  BTFSS  2A.7
0672:  GOTO   67A
....................    { 
....................       get_id_connect = 0; 
0673:  BCF    2A.7
....................       id_connect = rx_data; 
0674:  BSF    03.5
0675:  BSF    03.6
0676:  MOVF   38,W
0677:  BCF    03.5
0678:  BCF    03.6
0679:  MOVWF  5F
....................    } 
....................     
....................    if (rx_data == flag_IPD[flag_IPD_count]) 
067A:  MOVLW  B9
067B:  ADDWF  7E,W
067C:  MOVWF  04
067D:  BCF    03.7
067E:  MOVF   00,W
067F:  BSF    03.5
0680:  BSF    03.6
0681:  SUBWF  38,W
0682:  BTFSS  03.2
0683:  GOTO   691
....................    { 
....................       flag_IPD_count++; 
0684:  INCF   7E,F
....................       if (flag_IPD_count == 5) 
0685:  MOVF   7E,W
0686:  SUBLW  05
0687:  BTFSS  03.2
0688:  GOTO   690
....................       {          
....................          start_CONNECT = 1; 
0689:  BCF    03.5
068A:  BCF    03.6
068B:  BSF    2A.4
....................          get_id_connect = 1; 
068C:  BSF    2A.7
....................          flag_IPD_count = 0; 
068D:  CLRF   7E
068E:  BSF    03.5
068F:  BSF    03.6
....................       } 
....................    } 
....................    else 
0690:  GOTO   692
....................    { 
....................       flag_IPD_count = 0; 
0691:  CLRF   7E
....................    } 
....................     
....................     
....................     
....................    //---------------------------Xu ly cac ban tin tu trang web----------------- 
....................     
....................    //Xu ly khi co du lieu bat PIN 1 
....................    if (rx_data == flag_PIN1_TAT[flag_PIN1_TAT_count]) 
0692:  MOVLW  BF
0693:  BCF    03.6
0694:  ADDWF  6B,W
0695:  MOVWF  04
0696:  BCF    03.7
0697:  MOVF   00,W
0698:  BSF    03.6
0699:  SUBWF  38,W
069A:  BTFSS  03.2
069B:  GOTO   6AB
....................    { 
....................       flag_PIN1_TAT_count++; 
069C:  BCF    03.6
069D:  INCF   6B,F
....................       if (flag_PIN1_TAT_count == 13) 
069E:  MOVF   6B,W
069F:  SUBLW  0D
06A0:  BTFSS  03.2
06A1:  GOTO   6A9
....................       { 
....................          pin1_status = 0; 
06A2:  BCF    03.5
06A3:  CLRF   29
....................           
....................          flag_PIN1_TAT_count = 0; 
06A4:  BSF    03.5
06A5:  CLRF   6B
....................          is_updated = 0; 
06A6:  BCF    03.5
06A7:  BCF    2A.0
06A8:  BSF    03.5
....................       } 
....................    } 
....................    else 
06A9:  GOTO   6AD
06AA:  BSF    03.6
....................    { 
....................       flag_PIN1_TAT_count = 0; 
06AB:  BCF    03.6
06AC:  CLRF   6B
....................    } 
....................     
....................    //Xu ly khi co du lieu tat PIN 1 
....................    if (rx_data == flag_PIN1_MUC1[flag_PIN1_MUC1_count]) 
06AD:  MOVLW  CD
06AE:  ADDWF  6C,W
06AF:  MOVWF  04
06B0:  BCF    03.7
06B1:  MOVF   00,W
06B2:  BSF    03.6
06B3:  SUBWF  38,W
06B4:  BTFSS  03.2
06B5:  GOTO   6C6
....................    { 
....................       flag_PIN1_MUC1_count++; 
06B6:  BCF    03.6
06B7:  INCF   6C,F
....................       if (flag_PIN1_MUC1_count == 14) 
06B8:  MOVF   6C,W
06B9:  SUBLW  0E
06BA:  BTFSS  03.2
06BB:  GOTO   6C4
....................       { 
....................          pin1_status = 1; 
06BC:  MOVLW  01
06BD:  BCF    03.5
06BE:  MOVWF  29
....................           
....................          flag_PIN1_MUC1_count = 0; 
06BF:  BSF    03.5
06C0:  CLRF   6C
....................          is_updated = 0; 
06C1:  BCF    03.5
06C2:  BCF    2A.0
06C3:  BSF    03.5
....................       } 
....................    } 
....................    else 
06C4:  GOTO   6C8
06C5:  BSF    03.6
....................    { 
....................       flag_PIN1_MUC1_count = 0; 
06C6:  BCF    03.6
06C7:  CLRF   6C
....................    } 
....................     
....................    if (rx_data == flag_PIN1_MUC2[flag_PIN1_MUC2_count]) 
06C8:  MOVLW  DC
06C9:  ADDWF  6D,W
06CA:  MOVWF  04
06CB:  BCF    03.7
06CC:  MOVF   00,W
06CD:  BSF    03.6
06CE:  SUBWF  38,W
06CF:  BTFSS  03.2
06D0:  GOTO   6E1
....................    { 
....................       flag_PIN1_MUC2_count++; 
06D1:  BCF    03.6
06D2:  INCF   6D,F
....................       if (flag_PIN1_MUC2_count == 14) 
06D3:  MOVF   6D,W
06D4:  SUBLW  0E
06D5:  BTFSS  03.2
06D6:  GOTO   6DF
....................       { 
....................          pin1_status = 2; 
06D7:  MOVLW  02
06D8:  BCF    03.5
06D9:  MOVWF  29
....................           
....................          flag_PIN1_MUC2_count = 0; 
06DA:  BSF    03.5
06DB:  CLRF   6D
....................          is_updated = 0; 
06DC:  BCF    03.5
06DD:  BCF    2A.0
06DE:  BSF    03.5
....................       } 
....................    } 
....................    else 
06DF:  GOTO   6E3
06E0:  BSF    03.6
....................    { 
....................       flag_PIN1_MUC2_count = 0; 
06E1:  BCF    03.6
06E2:  CLRF   6D
....................    } 
.................... } 
....................  
....................  
.................... unsigned char rx_data; 
....................  
....................  
.................... unsigned int16 temp_count = 1000; 
*
18DD:  MOVLW  E8
18DE:  BCF    03.5
18DF:  BSF    03.6
18E0:  MOVWF  10
18E1:  MOVLW  03
18E2:  MOVWF  11
.................... int16 lux; 
.................... unsigned char temp0,temp1,temp2,temp3; 
....................  
....................  
....................  
.................... //#include "lcd.h" 
....................  
.................... #define LED1_PIN        PIN_B4 
.................... #define LED2_PIN        PIN_B5 
.................... #define LED3_PIN        PIN_B6 
....................  
.................... #define BUT1_PIN        PIN_D1 
.................... #define BUT2_PIN        PIN_D0 
.................... #define BUT3_PIN        PIN_C2 
....................  
....................  
.................... unsigned char str[5]; 
.................... //unsigned char i = 0; 
....................  
.................... const char buf1[]={"<head><meta HTTP-EQUIV=\"refresh\" CONTENT=\"10;url=http://192.168.0.123/\"><title>title</title></head><h1 align=\"center\"></h1><h1 align=\"center\"><font face=\"Times new roman\" size=\"6\" >BTL THIET KE HE THONG NHUNG</font></h1>"}; 
.................... const char buf2[]={"<h1 align=\"center\"><font face=\"Times new roman\" size=\"6\" >Mai Phu, Hoang Viet, Van Tho"}; 
.................... const char buf3[]={"<p align=\"center\"><font size=\"6\" color=\"black \">DEN</font></p>"}; 
.................... const char buf_TAT[]= {"<p align=\"center\" width =\"150\"><a href=\"?pin=TAT \"><button><font size=\"6\" color=\"green\" >TAT</font></button></a>"};//&nbsp;<a href=\"?pin=LV1\"><button><font size=\"6\">MUC 1</font></button></a>&nbsp;<a href=\"?pin=LV2\"><button><font size=\"6\">MUC 2</font></button></a><font size=\"6\">" }; 
.................... const char buf_MUC1[]={"<p align=\"center\" width =\"150\"><a href=\"?pin=MUC1 \"><button><font size=\"6\" color=\"green\" >MUC 1</font></button></a>"}; 
.................... const char buf_MUC2[]={"<p align=\"center\" width =\"150\"><a href=\"?pin=MUC2 \"><button><font size=\"6\" color=\"green\" >MUC 2</font></button></a>"}; 
....................  
.................... const char buf_temp1[]={"<p align=\"center\"><font size=\"6\" color=\"black \">Do roi: "}; 
.................... const char buf_temp2[] = {" lux p>"}; 
....................  
.................... const char status_on1[]= {"<svg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"4\" fill=\"lime  \" /></svg></font></p>"}; 
.................... const char status_on2[]= {"<svg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"4\" fill=\"red   \" /></svg></font></p>"}; 
.................... const char status_off[]= {"<svg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"4\" fill=\"silver\" /></svg></font></p>"}; 
....................  
.................... unsigned int16 word_number; 
....................  
.................... //!unsigned char ssid[] = "TP-LINK_6B50"; 
.................... //!unsigned char pass[] = "41633465"; 
.................... //!unsigned char ip_address[] = "192.168.0.123"; 
.................... unsigned char ssid[] = "Windows Phone0559"; 
18E3:  MOVLW  57
18E4:  MOVWF  1E
18E5:  MOVLW  69
18E6:  MOVWF  1F
18E7:  MOVLW  6E
18E8:  MOVWF  20
18E9:  MOVLW  64
18EA:  MOVWF  21
18EB:  MOVLW  6F
18EC:  MOVWF  22
18ED:  MOVLW  77
18EE:  MOVWF  23
18EF:  MOVLW  73
18F0:  MOVWF  24
18F1:  MOVLW  20
18F2:  MOVWF  25
18F3:  MOVLW  50
18F4:  MOVWF  26
18F5:  MOVLW  68
18F6:  MOVWF  27
18F7:  MOVLW  6F
18F8:  MOVWF  28
18F9:  MOVLW  6E
18FA:  MOVWF  29
18FB:  MOVLW  65
18FC:  MOVWF  2A
18FD:  MOVLW  30
18FE:  MOVWF  2B
18FF:  MOVLW  35
1900:  MOVWF  2C
1901:  MOVWF  2D
1902:  MOVLW  39
1903:  MOVWF  2E
1904:  CLRF   2F
.................... unsigned char pass[] ="12345679"; 
1905:  MOVLW  31
1906:  MOVWF  30
1907:  MOVLW  32
1908:  MOVWF  31
1909:  MOVLW  33
190A:  MOVWF  32
190B:  MOVLW  34
190C:  MOVWF  33
190D:  MOVLW  35
190E:  MOVWF  34
190F:  MOVLW  36
1910:  MOVWF  35
1911:  MOVLW  37
1912:  MOVWF  36
1913:  MOVLW  39
1914:  MOVWF  37
1915:  CLRF   38
.................... unsigned char ip_address[] = "192.168.137.250"; 
1916:  MOVLW  31
1917:  MOVWF  39
1918:  MOVLW  39
1919:  MOVWF  3A
191A:  MOVLW  32
191B:  MOVWF  3B
191C:  MOVLW  2E
191D:  MOVWF  3C
191E:  MOVLW  31
191F:  MOVWF  3D
1920:  MOVLW  36
1921:  MOVWF  3E
1922:  MOVLW  38
1923:  MOVWF  3F
1924:  MOVLW  2E
1925:  MOVWF  40
1926:  MOVLW  31
1927:  MOVWF  41
1928:  MOVLW  33
1929:  MOVWF  42
192A:  MOVLW  37
192B:  MOVWF  43
192C:  MOVLW  2E
192D:  MOVWF  44
192E:  MOVLW  32
192F:  MOVWF  45
1930:  MOVLW  35
1931:  MOVWF  46
1932:  MOVLW  30
1933:  MOVWF  47
1934:  CLRF   48
....................  
....................  
.................... unsigned int16 count_web_word_number() 
.................... { 
....................    unsigned int16 i = 0, word_count = 0; 
*
0800:  BSF    03.6
0801:  CLRF   5C
0802:  CLRF   5D
0803:  CLRF   5E
0804:  CLRF   5F
....................   
....................    while (buf1[i] != '\0') 
....................    { 
0805:  MOVF   5D,W
0806:  MOVWF  7A
0807:  MOVF   5C,W
0808:  BCF    0A.3
0809:  BCF    03.6
080A:  CALL   0E5
080B:  BSF    0A.3
080C:  XORLW  00
080D:  BTFSC  03.2
080E:  GOTO   025
....................       if (buf1[i] != '\\') 
080F:  BSF    03.6
0810:  MOVF   5D,W
0811:  MOVWF  7A
0812:  MOVF   5C,W
0813:  BCF    0A.3
0814:  BCF    03.6
0815:  CALL   0E5
0816:  BSF    0A.3
0817:  SUBLW  5C
0818:  BTFSC  03.2
0819:  GOTO   022
....................       { 
....................          word_count++; 
081A:  BSF    03.6
081B:  INCF   5E,F
081C:  BTFSC  03.2
081D:  INCF   5F,F
....................          i++; 
081E:  INCF   5C,F
081F:  BTFSC  03.2
0820:  INCF   5D,F
0821:  BCF    03.6
....................       } 
....................    } 
0822:  BSF    03.6
0823:  GOTO   005
0824:  BCF    03.6
....................     
....................    i = 0; 
0825:  BSF    03.6
0826:  CLRF   5D
0827:  CLRF   5C
....................    while (buf2[i] != '\0') 
....................    { 
0828:  MOVF   5D,W
0829:  MOVWF  7A
082A:  MOVF   5C,W
082B:  BCF    0A.3
082C:  BCF    03.6
082D:  CALL   1C9
082E:  BSF    0A.3
082F:  XORLW  00
0830:  BTFSC  03.2
0831:  GOTO   048
....................       if (buf2[i] != '\\') 
0832:  BSF    03.6
0833:  MOVF   5D,W
0834:  MOVWF  7A
0835:  MOVF   5C,W
0836:  BCF    0A.3
0837:  BCF    03.6
0838:  CALL   1C9
0839:  BSF    0A.3
083A:  SUBLW  5C
083B:  BTFSC  03.2
083C:  GOTO   045
....................       { 
....................          word_count++; 
083D:  BSF    03.6
083E:  INCF   5E,F
083F:  BTFSC  03.2
0840:  INCF   5F,F
....................          i++; 
0841:  INCF   5C,F
0842:  BTFSC  03.2
0843:  INCF   5D,F
0844:  BCF    03.6
....................       } 
....................    } 
0845:  BSF    03.6
0846:  GOTO   028
0847:  BCF    03.6
....................     
....................       i = 0; 
0848:  BSF    03.6
0849:  CLRF   5D
084A:  CLRF   5C
....................    while (buf3[i] != '\0') 
....................    { 
084B:  MOVF   5D,W
084C:  MOVWF  7A
084D:  MOVF   5C,W
084E:  BCF    0A.3
084F:  BCF    03.6
0850:  CALL   227
0851:  BSF    0A.3
0852:  XORLW  00
0853:  BTFSC  03.2
0854:  GOTO   06B
....................       if (buf3[i] != '\\') 
0855:  BSF    03.6
0856:  MOVF   5D,W
0857:  MOVWF  7A
0858:  MOVF   5C,W
0859:  BCF    0A.3
085A:  BCF    03.6
085B:  CALL   227
085C:  BSF    0A.3
085D:  SUBLW  5C
085E:  BTFSC  03.2
085F:  GOTO   068
....................       { 
....................          word_count++; 
0860:  BSF    03.6
0861:  INCF   5E,F
0862:  BTFSC  03.2
0863:  INCF   5F,F
....................          i++; 
0864:  INCF   5C,F
0865:  BTFSC  03.2
0866:  INCF   5D,F
0867:  BCF    03.6
....................       } 
....................    } 
0868:  BSF    03.6
0869:  GOTO   04B
086A:  BCF    03.6
....................     
....................     
....................    i = 0; 
086B:  BSF    03.6
086C:  CLRF   5D
086D:  CLRF   5C
....................    while (buf_TAT[i] != '\0') 
....................    { 
086E:  MOVF   5D,W
086F:  MOVWF  7A
0870:  MOVF   5C,W
0871:  BCF    0A.3
0872:  BCF    03.6
0873:  CALL   26A
0874:  BSF    0A.3
0875:  XORLW  00
0876:  BTFSC  03.2
0877:  GOTO   08E
....................       if (buf_TAT[i] != '\\') 
0878:  BSF    03.6
0879:  MOVF   5D,W
087A:  MOVWF  7A
087B:  MOVF   5C,W
087C:  BCF    0A.3
087D:  BCF    03.6
087E:  CALL   26A
087F:  BSF    0A.3
0880:  SUBLW  5C
0881:  BTFSC  03.2
0882:  GOTO   08B
....................       { 
....................          word_count++; 
0883:  BSF    03.6
0884:  INCF   5E,F
0885:  BTFSC  03.2
0886:  INCF   5F,F
....................          i++; 
0887:  INCF   5C,F
0888:  BTFSC  03.2
0889:  INCF   5D,F
088A:  BCF    03.6
....................       } 
....................    } 
088B:  BSF    03.6
088C:  GOTO   06E
088D:  BCF    03.6
....................     
....................       i = 0; 
088E:  BSF    03.6
088F:  CLRF   5D
0890:  CLRF   5C
....................    while (buf_MUC1[i] != '\0') 
....................    { 
0891:  MOVF   5D,W
0892:  MOVWF  7A
0893:  MOVF   5C,W
0894:  BCF    0A.3
0895:  BCF    03.6
0896:  CALL   2DF
0897:  BSF    0A.3
0898:  XORLW  00
0899:  BTFSC  03.2
089A:  GOTO   0B1
....................       if (buf_MUC1[i] != '\\') 
089B:  BSF    03.6
089C:  MOVF   5D,W
089D:  MOVWF  7A
089E:  MOVF   5C,W
089F:  BCF    0A.3
08A0:  BCF    03.6
08A1:  CALL   2DF
08A2:  BSF    0A.3
08A3:  SUBLW  5C
08A4:  BTFSC  03.2
08A5:  GOTO   0AE
....................       { 
....................          word_count++; 
08A6:  BSF    03.6
08A7:  INCF   5E,F
08A8:  BTFSC  03.2
08A9:  INCF   5F,F
....................          i++; 
08AA:  INCF   5C,F
08AB:  BTFSC  03.2
08AC:  INCF   5D,F
08AD:  BCF    03.6
....................       } 
....................    } 
08AE:  BSF    03.6
08AF:  GOTO   091
08B0:  BCF    03.6
....................     
....................       i = 0; 
08B1:  BSF    03.6
08B2:  CLRF   5D
08B3:  CLRF   5C
....................    while (buf_MUC2[i] != '\0') 
....................    { 
08B4:  MOVF   5D,W
08B5:  MOVWF  7A
08B6:  MOVF   5C,W
08B7:  BCF    0A.3
08B8:  BCF    03.6
08B9:  CALL   35A
08BA:  BSF    0A.3
08BB:  XORLW  00
08BC:  BTFSC  03.2
08BD:  GOTO   0D4
....................       if (buf_MUC2[i] != '\\') 
08BE:  BSF    03.6
08BF:  MOVF   5D,W
08C0:  MOVWF  7A
08C1:  MOVF   5C,W
08C2:  BCF    0A.3
08C3:  BCF    03.6
08C4:  CALL   35A
08C5:  BSF    0A.3
08C6:  SUBLW  5C
08C7:  BTFSC  03.2
08C8:  GOTO   0D1
....................       { 
....................          word_count++; 
08C9:  BSF    03.6
08CA:  INCF   5E,F
08CB:  BTFSC  03.2
08CC:  INCF   5F,F
....................          i++; 
08CD:  INCF   5C,F
08CE:  BTFSC  03.2
08CF:  INCF   5D,F
08D0:  BCF    03.6
....................       } 
....................    } 
08D1:  BSF    03.6
08D2:  GOTO   0B4
08D3:  BCF    03.6
....................     
....................       i = 0; 
08D4:  BSF    03.6
08D5:  CLRF   5D
08D6:  CLRF   5C
....................       while (status_off[i] != '\0') 
....................       { 
08D7:  MOVF   5D,W
08D8:  MOVWF  7A
08D9:  MOVF   5C,W
08DA:  BCF    0A.3
08DB:  BCF    03.6
08DC:  CALL   527
08DD:  BSF    0A.3
08DE:  XORLW  00
08DF:  BTFSC  03.2
08E0:  GOTO   0F7
....................          if (status_off[i] != '\\') 
08E1:  BSF    03.6
08E2:  MOVF   5D,W
08E3:  MOVWF  7A
08E4:  MOVF   5C,W
08E5:  BCF    0A.3
08E6:  BCF    03.6
08E7:  CALL   527
08E8:  BSF    0A.3
08E9:  SUBLW  5C
08EA:  BTFSC  03.2
08EB:  GOTO   0F4
....................          { 
....................             word_count++; 
08EC:  BSF    03.6
08ED:  INCF   5E,F
08EE:  BTFSC  03.2
08EF:  INCF   5F,F
....................             i++; 
08F0:  INCF   5C,F
08F1:  BTFSC  03.2
08F2:  INCF   5D,F
08F3:  BCF    03.6
....................          } 
....................       } 
08F4:  BSF    03.6
08F5:  GOTO   0D7
08F6:  BCF    03.6
....................     
....................    i = 0; 
08F7:  BSF    03.6
08F8:  CLRF   5D
08F9:  CLRF   5C
....................    while (buf_temp1[i] != '\0') 
....................    { 
08FA:  MOVF   5D,W
08FB:  MOVWF  7A
08FC:  MOVF   5C,W
08FD:  BCF    0A.3
08FE:  BCF    03.6
08FF:  CALL   3D2
0900:  BSF    0A.3
0901:  XORLW  00
0902:  BTFSC  03.2
0903:  GOTO   11A
....................       if (buf_temp1[i] != '\\') 
0904:  BSF    03.6
0905:  MOVF   5D,W
0906:  MOVWF  7A
0907:  MOVF   5C,W
0908:  BCF    0A.3
0909:  BCF    03.6
090A:  CALL   3D2
090B:  BSF    0A.3
090C:  SUBLW  5C
090D:  BTFSC  03.2
090E:  GOTO   117
....................       { 
....................          word_count++; 
090F:  BSF    03.6
0910:  INCF   5E,F
0911:  BTFSC  03.2
0912:  INCF   5F,F
....................          i++; 
0913:  INCF   5C,F
0914:  BTFSC  03.2
0915:  INCF   5D,F
0916:  BCF    03.6
....................       } 
....................    } 
0917:  BSF    03.6
0918:  GOTO   0FA
0919:  BCF    03.6
....................     
....................    word_count += 2; 
091A:  MOVLW  02
091B:  BSF    03.6
091C:  ADDWF  5E,F
091D:  BTFSC  03.0
091E:  INCF   5F,F
....................    i = 0; 
091F:  CLRF   5D
0920:  CLRF   5C
....................    while (buf_temp2[i] != '\0') 
....................    { 
0921:  MOVF   5D,W
0922:  MOVWF  7A
0923:  MOVF   5C,W
0924:  BCF    0A.3
0925:  BCF    03.6
0926:  CALL   412
0927:  BSF    0A.3
0928:  XORLW  00
0929:  BTFSC  03.2
092A:  GOTO   141
....................       if (buf_temp2[i] != '\\') 
092B:  BSF    03.6
092C:  MOVF   5D,W
092D:  MOVWF  7A
092E:  MOVF   5C,W
092F:  BCF    0A.3
0930:  BCF    03.6
0931:  CALL   412
0932:  BSF    0A.3
0933:  SUBLW  5C
0934:  BTFSC  03.2
0935:  GOTO   13E
....................       { 
....................          word_count++; 
0936:  BSF    03.6
0937:  INCF   5E,F
0938:  BTFSC  03.2
0939:  INCF   5F,F
....................          i++; 
093A:  INCF   5C,F
093B:  BTFSC  03.2
093C:  INCF   5D,F
093D:  BCF    03.6
....................       } 
....................    } 
093E:  BSF    03.6
093F:  GOTO   121
0940:  BCF    03.6
....................        
....................    return word_count; 
0941:  BSF    03.6
0942:  MOVF   5E,W
0943:  MOVWF  78
0944:  MOVF   5F,W
0945:  MOVWF  79
....................     
.................... } 
0946:  BCF    03.6
0947:  BSF    0A.3
0948:  BSF    0A.4
0949:  GOTO   14F (RETURN)
....................  
.................... void show_web() 
.................... { 
....................    if (start_CONNECT == 1) 
*
1592:  BTFSS  2A.4
1593:  GOTO   727
....................    { 
....................       ESP8266_CIPSEND(id_connect, word_number); 
1594:  MOVF   5F,W
1595:  BSF    03.6
1596:  MOVWF  5C
1597:  MOVF   1D,W
1598:  MOVWF  5E
1599:  MOVF   1C,W
159A:  MOVWF  5D
....................       delay_ms(100); 
*
15D1:  MOVLW  64
15D2:  BSF    03.6
15D3:  MOVWF  5D
15D4:  BCF    0A.4
15D5:  BCF    03.6
15D6:  CALL   6E8
15D7:  BSF    0A.4
....................        
....................       fprintf(ESP_STR, buf1); 
15D8:  BSF    03.6
15D9:  CLRF   5C
15DA:  MOVF   5C,W
15DB:  BCF    0A.4
15DC:  BCF    03.6
15DD:  CALL   0E5
15DE:  BSF    0A.4
15DF:  BSF    03.6
15E0:  INCF   5C,F
15E1:  MOVWF  77
15E2:  BCF    03.6
15E3:  BTFSS  0C.4
15E4:  GOTO   5E3
15E5:  MOVWF  19
15E6:  MOVLW  DC
15E7:  BSF    03.6
15E8:  SUBWF  5C,W
15E9:  BTFSS  03.2
15EA:  GOTO   5DA
....................       fprintf(ESP_STR, buf2); 
15EB:  CLRF   5C
15EC:  MOVF   5C,W
15ED:  BCF    0A.4
15EE:  BCF    03.6
15EF:  CALL   1C9
15F0:  BSF    0A.4
15F1:  BSF    03.6
15F2:  INCF   5C,F
15F3:  MOVWF  77
15F4:  BCF    03.6
15F5:  BTFSS  0C.4
15F6:  GOTO   5F5
15F7:  MOVWF  19
15F8:  MOVLW  56
15F9:  BSF    03.6
15FA:  SUBWF  5C,W
15FB:  BTFSS  03.2
15FC:  GOTO   5EC
....................       fprintf(ESP_STR, buf3); 
15FD:  CLRF   5C
15FE:  MOVF   5C,W
15FF:  BCF    0A.4
1600:  BCF    03.6
1601:  CALL   227
1602:  BSF    0A.4
1603:  BSF    03.6
1604:  INCF   5C,F
1605:  MOVWF  77
1606:  BCF    03.6
1607:  BTFSS  0C.4
1608:  GOTO   607
1609:  MOVWF  19
160A:  MOVLW  3E
160B:  BSF    03.6
160C:  SUBWF  5C,W
160D:  BTFSS  03.2
160E:  GOTO   5FE
....................        
....................       if (pin1_status == 0) 
160F:  BCF    03.6
1610:  MOVF   29,F
1611:  BTFSS  03.2
1612:  GOTO   628
....................          fprintf(ESP_STR, status_off); 
1613:  BSF    03.6
1614:  CLRF   5C
1615:  MOVF   5C,W
1616:  BCF    0A.4
1617:  BCF    03.6
1618:  CALL   527
1619:  BSF    0A.4
161A:  BSF    03.6
161B:  INCF   5C,F
161C:  MOVWF  77
161D:  BCF    03.6
161E:  BTFSS  0C.4
161F:  GOTO   61E
1620:  MOVWF  19
1621:  MOVLW  7E
1622:  BSF    03.6
1623:  SUBWF  5C,W
1624:  BTFSS  03.2
1625:  GOTO   615
....................       else if (pin1_status == 1) 
1626:  GOTO   656
1627:  BCF    03.6
1628:  DECFSZ 29,W
1629:  GOTO   63F
....................          fprintf(ESP_STR, status_on1); 
162A:  BSF    03.6
162B:  CLRF   5C
162C:  MOVF   5C,W
162D:  BCF    0A.4
162E:  BCF    03.6
162F:  CALL   41E
1630:  BSF    0A.4
1631:  BSF    03.6
1632:  INCF   5C,F
1633:  MOVWF  77
1634:  BCF    03.6
1635:  BTFSS  0C.4
1636:  GOTO   635
1637:  MOVWF  19
1638:  MOVLW  7E
1639:  BSF    03.6
163A:  SUBWF  5C,W
163B:  BTFSS  03.2
163C:  GOTO   62C
....................       else if (pin1_status == 2) 
163D:  GOTO   656
163E:  BCF    03.6
163F:  MOVF   29,W
1640:  SUBLW  02
1641:  BTFSS  03.2
1642:  GOTO   657
....................          fprintf(ESP_STR, status_on2); 
1643:  BSF    03.6
1644:  CLRF   5C
1645:  MOVF   5C,W
1646:  BCF    0A.4
1647:  BCF    03.6
1648:  CALL   4A1
1649:  BSF    0A.4
164A:  BSF    03.6
164B:  INCF   5C,F
164C:  MOVWF  77
164D:  BCF    03.6
164E:  BTFSS  0C.4
164F:  GOTO   64E
1650:  MOVWF  19
1651:  MOVLW  7E
1652:  BSF    03.6
1653:  SUBWF  5C,W
1654:  BTFSS  03.2
1655:  GOTO   645
1656:  BCF    03.6
....................       fprintf(ESP_STR, buf_TAT); 
1657:  BSF    03.6
1658:  CLRF   5C
1659:  MOVF   5C,W
165A:  BCF    0A.4
165B:  BCF    03.6
165C:  CALL   26A
165D:  BSF    0A.4
165E:  BSF    03.6
165F:  INCF   5C,F
1660:  MOVWF  77
1661:  BCF    03.6
1662:  BTFSS  0C.4
1663:  GOTO   662
1664:  MOVWF  19
1665:  MOVLW  70
1666:  BSF    03.6
1667:  SUBWF  5C,W
1668:  BTFSS  03.2
1669:  GOTO   659
....................       fprintf(ESP_STR, buf_MUC1); 
166A:  CLRF   5C
166B:  MOVF   5C,W
166C:  BCF    0A.4
166D:  BCF    03.6
166E:  CALL   2DF
166F:  BSF    0A.4
1670:  BSF    03.6
1671:  INCF   5C,F
1672:  MOVWF  77
1673:  BCF    03.6
1674:  BTFSS  0C.4
1675:  GOTO   674
1676:  MOVWF  19
1677:  MOVLW  73
1678:  BSF    03.6
1679:  SUBWF  5C,W
167A:  BTFSS  03.2
167B:  GOTO   66B
....................       fprintf(ESP_STR, buf_MUC2); 
167C:  CLRF   5C
167D:  MOVF   5C,W
167E:  BCF    0A.4
167F:  BCF    03.6
1680:  CALL   35A
1681:  BSF    0A.4
1682:  BSF    03.6
1683:  INCF   5C,F
1684:  MOVWF  77
1685:  BCF    03.6
1686:  BTFSS  0C.4
1687:  GOTO   686
1688:  MOVWF  19
1689:  MOVLW  73
168A:  BSF    03.6
168B:  SUBWF  5C,W
168C:  BTFSS  03.2
168D:  GOTO   67D
....................        
....................        
....................        
....................           
....................       fprintf(ESP_STR, buf_temp1); 
168E:  CLRF   5C
168F:  MOVF   5C,W
1690:  BCF    0A.4
1691:  BCF    03.6
1692:  CALL   3D2
1693:  BSF    0A.4
1694:  BSF    03.6
1695:  INCF   5C,F
1696:  MOVWF  77
1697:  BCF    03.6
1698:  BTFSS  0C.4
1699:  GOTO   698
169A:  MOVWF  19
169B:  MOVLW  38
169C:  BSF    03.6
169D:  SUBWF  5C,W
169E:  BTFSS  03.2
169F:  GOTO   68F
....................      // sprintf(str, "%2u", ); 
....................       sprintf(str, "%u", temp0); 
16A0:  MOVLW  01
16A1:  MOVWF  4A
16A2:  MOVLW  17
16A3:  MOVWF  49
16A4:  BSF    03.5
16A5:  BCF    03.6
16A6:  MOVF   6F,W
16A7:  BCF    03.5
16A8:  BSF    03.6
16A9:  MOVWF  5C
16AA:  MOVLW  1B
16AB:  MOVWF  5D
16AC:  BCF    0A.4
16AD:  BSF    0A.3
16AE:  BCF    03.6
16AF:  CALL   722
16B0:  BSF    0A.4
16B1:  BCF    0A.3
....................       fprintf(ESP_STR, str); 
16B2:  MOVLW  17
16B3:  MOVWF  04
16B4:  BSF    03.7
16B5:  MOVLW  00
16B6:  IORWF  00,W
16B7:  BTFSC  03.2
16B8:  GOTO   6BF
16B9:  MOVF   00,W
16BA:  BTFSS  0C.4
16BB:  GOTO   6BA
16BC:  MOVWF  19
16BD:  INCF   04,F
16BE:  GOTO   6B5
....................       sprintf(str, "%u", temp1); 
16BF:  MOVLW  01
16C0:  BSF    03.6
16C1:  MOVWF  4A
16C2:  MOVLW  17
16C3:  MOVWF  49
16C4:  MOVF   14,W
16C5:  MOVWF  5C
16C6:  MOVLW  1B
16C7:  MOVWF  5D
16C8:  BCF    0A.4
16C9:  BSF    0A.3
16CA:  BCF    03.6
16CB:  CALL   722
16CC:  BSF    0A.4
16CD:  BCF    0A.3
....................       fprintf(ESP_STR, str); 
16CE:  MOVLW  17
16CF:  MOVWF  04
16D0:  BSF    03.7
16D1:  MOVLW  00
16D2:  IORWF  00,W
16D3:  BTFSC  03.2
16D4:  GOTO   6DB
16D5:  MOVF   00,W
16D6:  BTFSS  0C.4
16D7:  GOTO   6D6
16D8:  MOVWF  19
16D9:  INCF   04,F
16DA:  GOTO   6D1
....................       sprintf(str, "%u", temp2); 
16DB:  MOVLW  01
16DC:  BSF    03.6
16DD:  MOVWF  4A
16DE:  MOVLW  17
16DF:  MOVWF  49
16E0:  MOVF   15,W
16E1:  MOVWF  5C
16E2:  MOVLW  1B
16E3:  MOVWF  5D
16E4:  BCF    0A.4
16E5:  BSF    0A.3
16E6:  BCF    03.6
16E7:  CALL   722
16E8:  BSF    0A.4
16E9:  BCF    0A.3
....................       fprintf(ESP_STR, str); 
16EA:  MOVLW  17
16EB:  MOVWF  04
16EC:  BSF    03.7
16ED:  MOVLW  00
16EE:  IORWF  00,W
16EF:  BTFSC  03.2
16F0:  GOTO   6F7
16F1:  MOVF   00,W
16F2:  BTFSS  0C.4
16F3:  GOTO   6F2
16F4:  MOVWF  19
16F5:  INCF   04,F
16F6:  GOTO   6ED
....................       sprintf(str, "%u", temp3); 
16F7:  MOVLW  01
16F8:  BSF    03.6
16F9:  MOVWF  4A
16FA:  MOVLW  17
16FB:  MOVWF  49
16FC:  MOVF   16,W
16FD:  MOVWF  5C
16FE:  MOVLW  1B
16FF:  MOVWF  5D
1700:  BCF    0A.4
1701:  BSF    0A.3
1702:  BCF    03.6
1703:  CALL   722
1704:  BSF    0A.4
1705:  BCF    0A.3
....................       fprintf(ESP_STR, str); 
1706:  MOVLW  17
1707:  MOVWF  04
1708:  BSF    03.7
1709:  MOVLW  00
170A:  IORWF  00,W
170B:  BTFSC  03.2
170C:  GOTO   713
170D:  MOVF   00,W
170E:  BTFSS  0C.4
170F:  GOTO   70E
1710:  MOVWF  19
1711:  INCF   04,F
1712:  GOTO   709
....................       fprintf(ESP_STR, buf_temp2); 
1713:  BSF    03.6
1714:  CLRF   5C
1715:  MOVF   5C,W
1716:  BCF    0A.4
1717:  BCF    03.6
1718:  CALL   412
1719:  BSF    0A.4
171A:  BSF    03.6
171B:  INCF   5C,F
171C:  MOVWF  77
171D:  BCF    03.6
171E:  BTFSS  0C.4
171F:  GOTO   71E
1720:  MOVWF  19
1721:  MOVLW  07
1722:  BSF    03.6
1723:  SUBWF  5C,W
1724:  BTFSS  03.2
1725:  GOTO   715
1726:  BCF    03.6
....................    } 
....................    start_CONNECT = 0; 
1727:  BCF    2A.4
....................     
....................    ESP8266_clearBuffer(); 
1728:  BCF    0A.4
1729:  CALL   7E3
172A:  BSF    0A.4
.................... } 
172B:  BSF    0A.3
172C:  BSF    0A.4
172D:  GOTO   471 (RETURN)
.................... void main() 
.................... { 
*
1800:  CLRF   04
1801:  BCF    03.7
1802:  MOVLW  1F
1803:  ANDWF  03,F
1804:  MOVLW  0A
1805:  BSF    03.5
1806:  MOVWF  19
1807:  MOVLW  A6
1808:  MOVWF  18
1809:  MOVLW  90
180A:  BCF    03.5
180B:  MOVWF  18
180C:  BSF    03.5
180D:  BSF    1F.0
180E:  BSF    1F.1
180F:  BSF    1F.2
1810:  BCF    1F.3
1811:  MOVLW  07
1812:  MOVWF  1C
....................  
....................      int16 GiaTriADC; 
....................          float Tam; 
....................          int32 DienTro; 
....................          int16 j; 
....................          int32 Tong; 
.................... //   lcd_init(); 
.................... //   lcd_clear(); 
....................     
.................... //   lcd_gotoxy(1,1); 
.................... //   printf(lcd_putc,"HE THONG NHUNG"); 
....................     
....................           
....................      
....................    output_float(BUT1_PIN); 
*
1939:  BSF    03.5
193A:  BCF    03.6
193B:  BSF    08.1
....................    output_float(BUT2_PIN); 
193C:  BSF    08.0
....................     
....................    output_high(LED1_PIN); 
193D:  BCF    06.4
193E:  BCF    03.5
193F:  BSF    06.4
....................    output_high(LED2_PIN); 
1940:  BSF    03.5
1941:  BCF    06.5
1942:  BCF    03.5
1943:  BSF    06.5
....................    output_high(LED3_PIN); 
1944:  BSF    03.5
1945:  BCF    06.6
1946:  BCF    03.5
1947:  BSF    06.6
....................     
....................     
....................    //Khoi tao ngat UART ben RX 
....................    enable_interrupts(INT_RDA); 
1948:  BSF    03.5
1949:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
194A:  MOVLW  C0
194B:  BCF    03.5
194C:  IORWF  0B,F
....................     
....................    //Dem so word cua code html web 
....................    word_number = count_web_word_number(); 
194D:  BCF    0A.4
194E:  GOTO   000
194F:  BSF    0A.4
1950:  MOVF   79,W
1951:  BSF    03.6
1952:  MOVWF  1D
1953:  MOVF   78,W
1954:  MOVWF  1C
....................     
....................    delay_ms(1000); 
1955:  MOVLW  04
1956:  MOVWF  5C
1957:  MOVLW  FA
1958:  MOVWF  5D
1959:  BCF    0A.4
195A:  BCF    0A.3
195B:  BCF    03.6
195C:  CALL   6E8
195D:  BSF    0A.4
195E:  BSF    0A.3
195F:  BSF    03.6
1960:  DECFSZ 5C,F
1961:  GOTO   157
....................     
....................    ESP8266_AT(); 
1962:  BCF    0A.4
1963:  BCF    0A.3
1964:  BCF    03.6
1965:  GOTO   6FC
1966:  BSF    0A.4
1967:  BSF    0A.3
....................    delay_ms(100); 
1968:  MOVLW  64
1969:  BSF    03.6
196A:  MOVWF  5D
196B:  BCF    0A.4
196C:  BCF    0A.3
196D:  BCF    03.6
196E:  CALL   6E8
196F:  BSF    0A.4
1970:  BSF    0A.3
....................     
....................    ESP8266_RST(); 
1971:  BCF    0A.4
1972:  BCF    0A.3
1973:  GOTO   715
1974:  BSF    0A.4
1975:  BSF    0A.3
....................    delay_ms(100); 
1976:  MOVLW  64
1977:  BSF    03.6
1978:  MOVWF  5D
1979:  BCF    0A.4
197A:  BCF    0A.3
197B:  BCF    03.6
197C:  CALL   6E8
197D:  BSF    0A.4
197E:  BSF    0A.3
....................     
....................    ESP8266_CWMODE(3); 
197F:  MOVLW  03
1980:  BSF    03.6
1981:  MOVWF  5C
1982:  BCF    0A.4
1983:  BCF    0A.3
1984:  BCF    03.6
1985:  GOTO   787
1986:  BSF    0A.4
1987:  BSF    0A.3
....................    delay_ms(100); 
1988:  MOVLW  64
1989:  BSF    03.6
198A:  MOVWF  5D
198B:  BCF    0A.4
198C:  BCF    0A.3
198D:  BCF    03.6
198E:  CALL   6E8
198F:  BSF    0A.4
1990:  BSF    0A.3
....................     
....................    ESP8266_CWJAP(ssid, pass); 
1991:  MOVLW  01
1992:  BSF    03.6
1993:  MOVWF  5D
1994:  MOVLW  1E
1995:  MOVWF  5C
1996:  MOVLW  01
1997:  MOVWF  5F
1998:  MOVLW  30
1999:  MOVWF  5E
199A:  BCF    0A.4
199B:  BCF    03.6
199C:  GOTO   14A
199D:  BSF    0A.4
....................    delay_ms(500); 
199E:  MOVLW  02
199F:  BSF    03.6
19A0:  MOVWF  5C
19A1:  MOVLW  FA
19A2:  MOVWF  5D
19A3:  BCF    0A.4
19A4:  BCF    0A.3
19A5:  BCF    03.6
19A6:  CALL   6E8
19A7:  BSF    0A.4
19A8:  BSF    0A.3
19A9:  BSF    03.6
19AA:  DECFSZ 5C,F
19AB:  GOTO   1A1
....................     
....................    ESP8266_CIPSTA(ip_address); 
19AC:  MOVLW  01
19AD:  MOVWF  5D
19AE:  MOVLW  39
19AF:  MOVWF  5C
19B0:  BCF    0A.4
19B1:  BCF    0A.3
19B2:  BCF    03.6
19B3:  GOTO   7AD
19B4:  BSF    0A.4
19B5:  BSF    0A.3
....................    delay_ms(500); 
19B6:  MOVLW  02
19B7:  BSF    03.6
19B8:  MOVWF  5C
19B9:  MOVLW  FA
19BA:  MOVWF  5D
19BB:  BCF    0A.4
19BC:  BCF    0A.3
19BD:  BCF    03.6
19BE:  CALL   6E8
19BF:  BSF    0A.4
19C0:  BSF    0A.3
19C1:  BSF    03.6
19C2:  DECFSZ 5C,F
19C3:  GOTO   1B9
....................     
....................    ESP8266_CIPMUX(1); 
19C4:  MOVLW  01
19C5:  MOVWF  5C
19C6:  BCF    0A.4
19C7:  BCF    03.6
19C8:  GOTO   1A1
19C9:  BSF    0A.4
....................    delay_ms(200); 
19CA:  MOVLW  C8
19CB:  BSF    03.6
19CC:  MOVWF  5D
19CD:  BCF    0A.4
19CE:  BCF    0A.3
19CF:  BCF    03.6
19D0:  CALL   6E8
19D1:  BSF    0A.4
19D2:  BSF    0A.3
....................     
....................    ESP8266_CIPSERVER(1,80); 
19D3:  MOVLW  01
19D4:  BSF    03.6
19D5:  MOVWF  5C
19D6:  CLRF   5E
19D7:  MOVLW  50
19D8:  MOVWF  5D
19D9:  BCF    0A.4
19DA:  BCF    03.6
19DB:  GOTO   228
19DC:  BSF    0A.4
....................    delay_ms(100); 
19DD:  MOVLW  64
19DE:  BSF    03.6
19DF:  MOVWF  5D
19E0:  BCF    0A.4
19E1:  BCF    0A.3
19E2:  BCF    03.6
19E3:  CALL   6E8
19E4:  BSF    0A.4
19E5:  BSF    0A.3
....................     
....................    ESP8266_CIPSTO(1); 
19E6:  BSF    03.6
19E7:  CLRF   5D
19E8:  MOVLW  01
19E9:  MOVWF  5C
19EA:  BCF    0A.4
19EB:  BCF    03.6
19EC:  GOTO   25F
19ED:  BSF    0A.4
....................    delay_ms(100); 
19EE:  MOVLW  64
19EF:  BSF    03.6
19F0:  MOVWF  5D
19F1:  BCF    0A.4
19F2:  BCF    0A.3
19F3:  BCF    03.6
19F4:  CALL   6E8
19F5:  BSF    0A.4
19F6:  BSF    0A.3
....................     
....................    ESP8266_clearBuffer(); 
19F7:  BCF    0A.4
19F8:  BCF    0A.3
19F9:  CALL   7E3
19FA:  BSF    0A.4
19FB:  BSF    0A.3
....................    delay_ms(100); 
19FC:  MOVLW  64
19FD:  BSF    03.6
19FE:  MOVWF  5D
19FF:  BCF    0A.4
1A00:  BCF    0A.3
1A01:  BCF    03.6
1A02:  CALL   6E8
1A03:  BSF    0A.4
1A04:  BSF    0A.3
....................  
....................    setup_adc(ADC_CLOCK_INTERNAL); 
1A05:  BSF    03.5
1A06:  BCF    1F.6
1A07:  BCF    03.5
1A08:  BSF    1F.6
1A09:  BSF    1F.7
1A0A:  BSF    03.5
1A0B:  BSF    1F.7
1A0C:  BCF    03.5
1A0D:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN2_AN3_AN4); 
1A0E:  BSF    03.5
1A0F:  BCF    1F.0
1A10:  BSF    1F.1
1A11:  BCF    1F.2
1A12:  BCF    1F.3
....................    set_adc_channel(0); 
1A13:  MOVLW  00
1A14:  MOVWF  78
1A15:  BCF    03.5
1A16:  MOVF   1F,W
1A17:  ANDLW  C7
1A18:  IORWF  78,W
1A19:  MOVWF  1F
....................     
....................    setup_ccp1(CCP_PWM);                   // Configure CCP1 as a PWM 
1A1A:  BSF    03.6
1A1B:  BCF    4B.2
1A1C:  MOVF   4B,W
1A1D:  BSF    03.5
1A1E:  BCF    03.6
1A1F:  MOVWF  07
1A20:  BCF    03.5
1A21:  BCF    07.2
1A22:  MOVLW  0C
1A23:  MOVWF  17
....................   setup_ccp2(CCP_PWM);                   // Configure CCP2 as a PWM 
1A24:  BSF    03.6
1A25:  BCF    4B.1
1A26:  MOVF   4B,W
1A27:  BSF    03.5
1A28:  BCF    03.6
1A29:  MOVWF  07
1A2A:  BCF    03.5
1A2B:  BCF    07.1
1A2C:  MOVLW  0C
1A2D:  MOVWF  1D
....................   delay_ms(100);                         // Wait 100ms 
1A2E:  MOVLW  64
1A2F:  BSF    03.6
1A30:  MOVWF  5D
1A31:  BCF    0A.4
1A32:  BCF    0A.3
1A33:  BCF    03.6
1A34:  CALL   6E8
1A35:  BSF    0A.4
1A36:  BSF    0A.3
....................   setup_timer_2(T2_DIV_BY_16, 255, 1);   // Set PWM frequency to 488Hz 
1A37:  MOVLW  00
1A38:  MOVWF  78
1A39:  IORLW  06
1A3A:  MOVWF  12
1A3B:  MOVLW  FF
1A3C:  BSF    03.5
1A3D:  MOVWF  12
....................     
....................     
.................... //   lcd_clear(); 
....................    while (true) 
....................    { 
....................        
....................      Tong=0; 
1A3E:  BCF    03.5
1A3F:  BSF    03.6
1A40:  CLRF   5B
1A41:  CLRF   5A
1A42:  CLRF   59
1A43:  CLRF   58
....................       for(j=1;j<=50;j++) 
1A44:  CLRF   57
1A45:  MOVLW  01
1A46:  MOVWF  56
1A47:  MOVF   57,F
1A48:  BTFSS  03.2
1A49:  GOTO   271
1A4A:  MOVF   56,W
1A4B:  SUBLW  32
1A4C:  BTFSS  03.0
1A4D:  GOTO   271
....................       { 
....................          GiaTriADC = read_adc();    
1A4E:  BCF    03.6
1A4F:  BSF    1F.2
1A50:  BTFSC  1F.2
1A51:  GOTO   250
1A52:  MOVF   1E,W
1A53:  MOVWF  7A
1A54:  BSF    03.5
1A55:  MOVF   1E,W
1A56:  BCF    03.5
1A57:  BSF    03.6
1A58:  MOVWF  4C
1A59:  MOVF   7A,W
1A5A:  MOVWF  4D
....................          //Tong += GiaTriADC; 
....................          Tong = Tong + GiaTriADC;  
1A5B:  MOVF   4C,W
1A5C:  ADDWF  58,F
1A5D:  MOVF   4D,W
1A5E:  BTFSC  03.0
1A5F:  INCFSZ 4D,W
1A60:  ADDWF  59,F
1A61:  MOVLW  00
1A62:  BTFSC  03.0
1A63:  MOVLW  01
1A64:  ADDWF  5A,F
1A65:  MOVLW  00
1A66:  BTFSC  03.0
1A67:  MOVLW  01
1A68:  ADDWF  5B,F
....................          delay_us(5); 
1A69:  MOVLW  08
1A6A:  MOVWF  77
1A6B:  DECFSZ 77,F
1A6C:  GOTO   26B
....................       } 
1A6D:  INCF   56,F
1A6E:  BTFSC  03.2
1A6F:  INCF   57,F
1A70:  GOTO   247
....................       Tong = Tong/50; 
1A71:  MOVF   5B,W
1A72:  MOVWF  5F
1A73:  MOVF   5A,W
1A74:  MOVWF  5E
1A75:  MOVF   59,W
1A76:  MOVWF  5D
1A77:  MOVF   58,W
1A78:  MOVWF  5C
1A79:  CLRF   63
1A7A:  CLRF   62
1A7B:  CLRF   61
1A7C:  MOVLW  32
1A7D:  MOVWF  60
1A7E:  BCF    0A.4
1A7F:  BCF    03.6
1A80:  GOTO   289
1A81:  BSF    0A.4
1A82:  MOVF   7A,W
1A83:  BSF    03.6
1A84:  MOVWF  5B
1A85:  MOVF   79,W
1A86:  MOVWF  5A
1A87:  MOVF   78,W
1A88:  MOVWF  59
1A89:  MOVF   77,W
1A8A:  MOVWF  58
....................        
....................       //Tam =  (500f*(float)Tong)/1023f; 
....................       Tam = ((5f * (float)Tong)/1023f); 
1A8B:  MOVF   5B,W
1A8C:  MOVWF  5F
1A8D:  MOVF   5A,W
1A8E:  MOVWF  5E
1A8F:  MOVF   59,W
1A90:  MOVWF  5D
1A91:  MOVF   58,W
1A92:  MOVWF  5C
1A93:  BCF    0A.4
1A94:  BCF    03.6
1A95:  CALL   2CF
1A96:  BSF    0A.4
1A97:  BSF    03.5
1A98:  BSF    03.6
1A99:  CLRF   25
1A9A:  CLRF   24
1A9B:  MOVLW  20
1A9C:  MOVWF  23
1A9D:  MOVLW  81
1A9E:  MOVWF  22
1A9F:  MOVF   7A,W
1AA0:  MOVWF  29
1AA1:  MOVF   79,W
1AA2:  MOVWF  28
1AA3:  MOVF   78,W
1AA4:  MOVWF  27
1AA5:  MOVF   77,W
1AA6:  MOVWF  26
1AA7:  BCF    0A.4
1AA8:  BCF    03.5
1AA9:  BCF    03.6
1AAA:  CALL   2EC
1AAB:  BSF    0A.4
1AAC:  MOVF   77,W
1AAD:  BSF    03.6
1AAE:  MOVWF  5C
1AAF:  MOVF   78,W
1AB0:  MOVWF  5D
1AB1:  MOVF   79,W
1AB2:  MOVWF  5E
1AB3:  MOVF   7A,W
1AB4:  MOVWF  5F
1AB5:  BSF    03.5
1AB6:  MOVWF  28
1AB7:  BCF    03.5
1AB8:  MOVF   5E,W
1AB9:  BSF    03.5
1ABA:  MOVWF  27
1ABB:  BCF    03.5
1ABC:  MOVF   5D,W
1ABD:  BSF    03.5
1ABE:  MOVWF  26
1ABF:  BCF    03.5
1AC0:  MOVF   5C,W
1AC1:  BSF    03.5
1AC2:  MOVWF  25
1AC3:  CLRF   2C
1AC4:  MOVLW  C0
1AC5:  MOVWF  2B
1AC6:  MOVLW  7F
1AC7:  MOVWF  2A
1AC8:  MOVLW  88
1AC9:  MOVWF  29
1ACA:  BCF    0A.4
1ACB:  BCF    03.5
1ACC:  BCF    03.6
1ACD:  CALL   365
1ACE:  BSF    0A.4
1ACF:  MOVF   7A,W
1AD0:  BSF    03.6
1AD1:  MOVWF  51
1AD2:  MOVF   79,W
1AD3:  MOVWF  50
1AD4:  MOVF   78,W
1AD5:  MOVWF  4F
1AD6:  MOVF   77,W
1AD7:  MOVWF  4E
....................   //    lcd_gotoxy(1,1); 
....................     //  printf(lcd_putc,"%ld/ %f", Tong,Tam); 
....................        
....................       DienTro = (int32)(((15345f/(float)Tong) - 23f)*1000);// (float)giatriAdc)/1023; 
1AD8:  MOVF   5B,W
1AD9:  MOVWF  5F
1ADA:  MOVF   5A,W
1ADB:  MOVWF  5E
1ADC:  MOVF   59,W
1ADD:  MOVWF  5D
1ADE:  MOVF   58,W
1ADF:  MOVWF  5C
1AE0:  BCF    0A.4
1AE1:  BCF    03.6
1AE2:  CALL   2CF
1AE3:  BSF    0A.4
1AE4:  BSF    03.5
1AE5:  BSF    03.6
1AE6:  CLRF   28
1AE7:  MOVLW  C4
1AE8:  MOVWF  27
1AE9:  MOVLW  6F
1AEA:  MOVWF  26
1AEB:  MOVLW  8C
1AEC:  MOVWF  25
1AED:  MOVF   7A,W
1AEE:  MOVWF  2C
1AEF:  MOVF   79,W
1AF0:  MOVWF  2B
1AF1:  MOVF   78,W
1AF2:  MOVWF  2A
1AF3:  MOVF   77,W
1AF4:  MOVWF  29
1AF5:  BCF    0A.4
1AF6:  BCF    03.5
1AF7:  BCF    03.6
1AF8:  CALL   365
1AF9:  BSF    0A.4
1AFA:  MOVF   77,W
1AFB:  BSF    03.6
1AFC:  MOVWF  5C
1AFD:  MOVF   78,W
1AFE:  MOVWF  5D
1AFF:  MOVF   79,W
1B00:  MOVWF  5E
1B01:  MOVF   7A,W
1B02:  MOVWF  5F
1B03:  BSF    03.1
1B04:  MOVF   5F,W
1B05:  BSF    03.5
1B06:  MOVWF  29
1B07:  BCF    03.5
1B08:  MOVF   5E,W
1B09:  BSF    03.5
1B0A:  MOVWF  28
1B0B:  BCF    03.5
1B0C:  MOVF   5D,W
1B0D:  BSF    03.5
1B0E:  MOVWF  27
1B0F:  BCF    03.5
1B10:  MOVF   5C,W
1B11:  BSF    03.5
1B12:  MOVWF  26
1B13:  CLRF   2D
1B14:  CLRF   2C
1B15:  MOVLW  38
1B16:  MOVWF  2B
1B17:  MOVLW  83
1B18:  MOVWF  2A
1B19:  BCF    0A.4
1B1A:  BCF    03.5
1B1B:  BCF    03.6
1B1C:  CALL   433
1B1D:  BSF    0A.4
1B1E:  MOVF   77,W
1B1F:  BSF    03.6
1B20:  MOVWF  60
1B21:  MOVF   78,W
1B22:  MOVWF  61
1B23:  MOVF   79,W
1B24:  MOVWF  62
1B25:  MOVF   7A,W
1B26:  MOVWF  63
1B27:  BSF    03.5
1B28:  MOVWF  25
1B29:  BCF    03.5
1B2A:  MOVF   62,W
1B2B:  BSF    03.5
1B2C:  MOVWF  24
1B2D:  BCF    03.5
1B2E:  MOVF   61,W
1B2F:  BSF    03.5
1B30:  MOVWF  23
1B31:  BCF    03.5
1B32:  MOVF   60,W
1B33:  BSF    03.5
1B34:  MOVWF  22
1B35:  CLRF   29
1B36:  CLRF   28
1B37:  MOVLW  7A
1B38:  MOVWF  27
1B39:  MOVLW  88
1B3A:  MOVWF  26
1B3B:  BCF    0A.4
1B3C:  BCF    03.5
1B3D:  BCF    03.6
1B3E:  CALL   2EC
1B3F:  BSF    0A.4
1B40:  MOVF   7A,W
1B41:  BSF    03.6
1B42:  MOVWF  67
1B43:  MOVF   79,W
1B44:  MOVWF  66
1B45:  MOVF   78,W
1B46:  MOVWF  65
1B47:  MOVF   77,W
1B48:  MOVWF  64
1B49:  BCF    0A.4
1B4A:  BCF    03.6
1B4B:  GOTO   57D
1B4C:  BSF    0A.4
1B4D:  MOVF   7A,W
1B4E:  BSF    03.6
1B4F:  MOVWF  55
1B50:  MOVF   79,W
1B51:  MOVWF  54
1B52:  MOVF   78,W
1B53:  MOVWF  53
1B54:  MOVF   77,W
1B55:  MOVWF  52
....................       lux = (int16)(12500000f * (float)(pow((float)(DienTro),(-1.4059f))));  
1B56:  MOVF   55,W
1B57:  MOVWF  5F
1B58:  MOVF   54,W
1B59:  MOVWF  5E
1B5A:  MOVF   53,W
1B5B:  MOVWF  5D
1B5C:  MOVF   52,W
1B5D:  MOVWF  5C
1B5E:  BCF    0A.4
1B5F:  BCF    03.6
1B60:  CALL   2CF
1B61:  BSF    0A.4
1B62:  MOVF   77,W
1B63:  BSF    03.6
1B64:  MOVWF  5C
1B65:  MOVF   78,W
1B66:  MOVWF  5D
1B67:  MOVF   79,W
1B68:  MOVWF  5E
1B69:  MOVF   7A,W
1B6A:  MOVWF  5F
1B6B:  MOVWF  63
1B6C:  MOVF   5E,W
1B6D:  MOVWF  62
1B6E:  MOVF   5D,W
1B6F:  MOVWF  61
1B70:  MOVF   5C,W
1B71:  MOVWF  60
1B72:  MOVLW  88
1B73:  MOVWF  67
1B74:  MOVLW  F4
1B75:  MOVWF  66
1B76:  MOVLW  B3
1B77:  MOVWF  65
1B78:  MOVLW  7F
1B79:  MOVWF  64
1B7A:  BCF    0A.4
1B7B:  BCF    03.6
1B7C:  GOTO   62F
1B7D:  BSF    0A.4
1B7E:  MOVLW  20
1B7F:  BSF    03.5
1B80:  BSF    03.6
1B81:  MOVWF  25
1B82:  MOVLW  BC
1B83:  MOVWF  24
1B84:  MOVLW  3E
1B85:  MOVWF  23
1B86:  MOVLW  96
1B87:  MOVWF  22
1B88:  MOVF   7A,W
1B89:  MOVWF  29
1B8A:  MOVF   79,W
1B8B:  MOVWF  28
1B8C:  MOVF   78,W
1B8D:  MOVWF  27
1B8E:  MOVF   77,W
1B8F:  MOVWF  26
1B90:  BCF    0A.4
1B91:  BCF    03.5
1B92:  BCF    03.6
1B93:  CALL   2EC
1B94:  BSF    0A.4
1B95:  MOVF   7A,W
1B96:  BSF    03.5
1B97:  BSF    03.6
1B98:  MOVWF  25
1B99:  MOVF   79,W
1B9A:  MOVWF  24
1B9B:  MOVF   78,W
1B9C:  MOVWF  23
1B9D:  MOVF   77,W
1B9E:  MOVWF  22
1B9F:  BCF    0A.4
1BA0:  BCF    03.5
1BA1:  BCF    03.6
1BA2:  CALL   60C
1BA3:  BSF    0A.4
1BA4:  MOVF   79,W
1BA5:  BSF    03.6
1BA6:  MOVWF  13
1BA7:  MOVF   78,W
1BA8:  MOVWF  12
....................        
....................    //   lcd_gotoxy(1,2); 
....................     //  printf(lcd_putc,"R: %ld/ %ld", DienTro,lux); 
....................        
....................        
....................        
....................        
....................        
....................        
....................       temp0 = (unsigned char)(lux/1000);//1235 
1BA9:  MOVF   13,W
1BAA:  MOVWF  60
1BAB:  MOVF   12,W
1BAC:  MOVWF  5F
1BAD:  MOVLW  03
1BAE:  MOVWF  62
1BAF:  MOVLW  E8
1BB0:  MOVWF  61
1BB1:  BCF    0A.4
1BB2:  BCF    03.6
1BB3:  CALL   6EC
1BB4:  BSF    0A.4
1BB5:  MOVF   78,W
1BB6:  BSF    03.5
1BB7:  MOVWF  6F
....................       temp1 = (unsigned char)((lux%1000)/100); 
1BB8:  BCF    03.5
1BB9:  BSF    03.6
1BBA:  MOVF   13,W
1BBB:  MOVWF  60
1BBC:  MOVF   12,W
1BBD:  MOVWF  5F
1BBE:  MOVLW  03
1BBF:  MOVWF  62
1BC0:  MOVLW  E8
1BC1:  MOVWF  61
1BC2:  BCF    0A.4
1BC3:  BCF    03.6
1BC4:  CALL   6EC
1BC5:  BSF    0A.4
1BC6:  MOVF   77,W
1BC7:  BSF    03.6
1BC8:  MOVWF  5C
1BC9:  MOVF   7A,W
1BCA:  MOVWF  5D
1BCB:  MOVWF  60
1BCC:  MOVF   5C,W
1BCD:  MOVWF  5F
1BCE:  CLRF   62
1BCF:  MOVLW  64
1BD0:  MOVWF  61
1BD1:  BCF    0A.4
1BD2:  BCF    03.6
1BD3:  CALL   6EC
1BD4:  BSF    0A.4
1BD5:  MOVF   78,W
1BD6:  BSF    03.6
1BD7:  MOVWF  14
....................       temp2 = (unsigned char)(((lux%1000)%100)/10); 
1BD8:  MOVF   13,W
1BD9:  MOVWF  60
1BDA:  MOVF   12,W
1BDB:  MOVWF  5F
1BDC:  MOVLW  03
1BDD:  MOVWF  62
1BDE:  MOVLW  E8
1BDF:  MOVWF  61
1BE0:  BCF    0A.4
1BE1:  BCF    03.6
1BE2:  CALL   6EC
1BE3:  BSF    0A.4
1BE4:  MOVF   77,W
1BE5:  BSF    03.6
1BE6:  MOVWF  5C
1BE7:  MOVF   7A,W
1BE8:  MOVWF  5D
1BE9:  MOVWF  60
1BEA:  MOVF   5C,W
1BEB:  MOVWF  5F
1BEC:  CLRF   62
1BED:  MOVLW  64
1BEE:  MOVWF  61
1BEF:  BCF    0A.4
1BF0:  BCF    03.6
1BF1:  CALL   6EC
1BF2:  BSF    0A.4
1BF3:  MOVF   77,W
1BF4:  BSF    03.6
1BF5:  MOVWF  5D
1BF6:  MOVF   7A,W
1BF7:  MOVWF  5E
1BF8:  MOVWF  60
1BF9:  MOVF   5D,W
1BFA:  MOVWF  5F
1BFB:  CLRF   62
1BFC:  MOVLW  0A
1BFD:  MOVWF  61
1BFE:  BCF    0A.4
1BFF:  BCF    03.6
1C00:  CALL   6EC
1C01:  BSF    0A.4
1C02:  MOVF   78,W
1C03:  BSF    03.6
1C04:  MOVWF  15
....................       temp3 = (unsigned char)((((lux%1000)%100)%10)); 
1C05:  MOVF   13,W
1C06:  MOVWF  60
1C07:  MOVF   12,W
1C08:  MOVWF  5F
1C09:  MOVLW  03
1C0A:  MOVWF  62
1C0B:  MOVLW  E8
1C0C:  MOVWF  61
1C0D:  BCF    0A.4
1C0E:  BCF    03.6
1C0F:  CALL   6EC
1C10:  BSF    0A.4
1C11:  MOVF   77,W
1C12:  BSF    03.6
1C13:  MOVWF  5C
1C14:  MOVF   7A,W
1C15:  MOVWF  5D
1C16:  MOVWF  60
1C17:  MOVF   5C,W
1C18:  MOVWF  5F
1C19:  CLRF   62
1C1A:  MOVLW  64
1C1B:  MOVWF  61
1C1C:  BCF    0A.4
1C1D:  BCF    03.6
1C1E:  CALL   6EC
1C1F:  BSF    0A.4
1C20:  MOVF   77,W
1C21:  BSF    03.6
1C22:  MOVWF  5D
1C23:  MOVF   7A,W
1C24:  MOVWF  5E
1C25:  MOVWF  60
1C26:  MOVF   5D,W
1C27:  MOVWF  5F
1C28:  CLRF   62
1C29:  MOVLW  0A
1C2A:  MOVWF  61
1C2B:  BCF    0A.4
1C2C:  BCF    03.6
1C2D:  CALL   6EC
1C2E:  BSF    0A.4
1C2F:  MOVF   77,W
1C30:  BSF    03.6
1C31:  MOVWF  16
....................         
....................        
....................        
....................       if (!input(BUT1_PIN)) 
1C32:  BSF    03.5
1C33:  BCF    03.6
1C34:  BSF    08.1
1C35:  BCF    03.5
1C36:  BTFSC  08.1
1C37:  GOTO   44C
....................       { 
....................          while (!input(BUT1_PIN)) {} 
1C38:  BSF    03.5
1C39:  BSF    08.1
1C3A:  BCF    03.5
1C3B:  BTFSS  08.1
1C3C:  GOTO   438
....................           
....................          if (pin1_status == 0) 
1C3D:  MOVF   29,F
1C3E:  BTFSS  03.2
1C3F:  GOTO   443
....................             pin1_status = 1; 
1C40:  MOVLW  01
1C41:  MOVWF  29
....................          else if (pin1_status == 1) 
1C42:  GOTO   44C
1C43:  DECFSZ 29,W
1C44:  GOTO   448
....................             pin1_status = 2; 
1C45:  MOVLW  02
1C46:  MOVWF  29
....................          else if (pin1_status == 2) 
1C47:  GOTO   44C
1C48:  MOVF   29,W
1C49:  SUBLW  02
1C4A:  BTFSC  03.2
....................             pin1_status = 0; 
1C4B:  CLRF   29
....................       } 
....................       
....................     
....................       if (pin1_status == 0){ 
1C4C:  MOVF   29,F
1C4D:  BTFSS  03.2
1C4E:  GOTO   455
....................       output_high(LED1_PIN); 
1C4F:  BSF    03.5
1C50:  BCF    06.4
1C51:  BCF    03.5
1C52:  BSF    06.4
....................          set_pwm1_duty(0); 
1C53:  CLRF   15
....................          is_updated == 0; 
....................       } 
....................           
....................           
....................       else if (pin1_status == 1){ 
1C54:  GOTO   46C
1C55:  DECFSZ 29,W
1C56:  GOTO   460
....................       output_low(LED1_PIN); 
1C57:  BSF    03.5
1C58:  BCF    06.4
1C59:  BCF    03.5
1C5A:  BCF    06.4
....................          set_pwm1_duty(120); 
1C5B:  MOVLW  78
1C5C:  MOVWF  15
....................          set_pwm2_duty(50); 
1C5D:  MOVLW  32
1C5E:  MOVWF  1B
....................          is_updated == 0; 
....................       } 
....................           
....................       else if (pin1_status == 2){ 
1C5F:  GOTO   46C
1C60:  MOVF   29,W
1C61:  SUBLW  02
1C62:  BTFSS  03.2
1C63:  GOTO   46C
....................       output_low(LED1_PIN); 
1C64:  BSF    03.5
1C65:  BCF    06.4
1C66:  BCF    03.5
1C67:  BCF    06.4
....................          set_pwm1_duty(255); 
1C68:  MOVLW  FF
1C69:  MOVWF  15
....................          set_pwm2_duty(20); 
1C6A:  MOVLW  14
1C6B:  MOVWF  1B
....................          is_updated == 0; 
....................       } 
....................           
....................           
....................        
....................       if (is_updated == 0) 
1C6C:  BTFSC  2A.0
1C6D:  GOTO   472
....................       { 
....................          is_updated = 1; 
1C6E:  BSF    2A.0
....................          show_web(); 
1C6F:  BCF    0A.3
1C70:  GOTO   592
1C71:  BSF    0A.3
....................       } 
....................       delay_ms(50); 
1C72:  MOVLW  32
1C73:  BSF    03.6
1C74:  MOVWF  5D
1C75:  BCF    0A.4
1C76:  BCF    0A.3
1C77:  BCF    03.6
1C78:  CALL   6E8
1C79:  BSF    0A.4
1C7A:  BSF    0A.3
....................    } 
1C7B:  GOTO   23F
.................... } 
....................  
.................... #INT_RDA 
.................... void int_rda_isr() 
1C7C:  SLEEP
.................... { 
....................    clear_interrupt(INT_RDA); 
*
05AA:  BCF    0C.5
....................     
....................    rx_data = getc(ESP_STR); 
*
05B5:  MOVF   78,W
05B6:  BSF    03.5
05B7:  MOVWF  6E
....................  
....................    ESP8266_executeBuffer(rx_data); 
05B8:  MOVF   6E,W
05B9:  BSF    03.6
05BA:  MOVWF  38
.................... } 
*
06E3:  BCF    03.5
06E4:  BCF    0C.5
06E5:  BCF    0A.3
06E6:  BCF    0A.4
06E7:  GOTO   01F

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
